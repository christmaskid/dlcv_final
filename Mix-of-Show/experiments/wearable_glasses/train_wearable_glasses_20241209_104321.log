2024-12-09 10:43:21,494 INFO: 
Version Information: 
OpenStory
	PyTorch: 2.3.1+cu121
	TorchVision: 0.18.1+cu121
2024-12-09 10:43:21,495 INFO: 
  name: wearable_glasses
  model_type: EDLoraModel
  world_size: 1
  num_gpu: 1
  manual_seed: 0
  datasets:[
    train:[
      name: LoraDataset
      type: LoraDataset
      concept_list: /content/Data/jsons/wearable_glasses.json
      use_caption: True
      instance_transform: [OrderedDict([('type', 'Resize'), ('size', 512)]), OrderedDict([('type', 'HumanResizeCropFinal'), ('size', 512), ('crop_p', 0.5)]), OrderedDict([('type', 'ToTensor')]), OrderedDict([('type', 'Normalize'), ('mean', [0.5]), ('std', [0.5])]), OrderedDict([('type', 'ShuffleCaption'), ('keep_token_num', 1)]), OrderedDict([('type', 'EnhanceText'), ('enhance_type', 'human')])]
      replace_mapping:[
        <TOK>: <wearable_glasses_1> <wearable_glasses_2>
      ]
      dataset_enlarge_ratio: 100
      use_shuffle: True
      num_worker_per_gpu: 2
      batch_size_per_gpu: 1
      pin_memory: True
      prefetch_mode: cuda
      phase: train
    ]
    val_vis:[
      name: PromptDataset
      type: PromptDataset
      prompts: /content/dlcv_final/Mix-of-Show/datasets/validation_prompts/val.txt
      num_samples_per_prompt: 1
      latent_size: [4, 64, 64]
      replace_mapping:[
        <TOK>: <wearable_glasses_1> <wearable_glasses_2>
      ]
      use_shuffle: False
      num_worker_per_gpu: 2
      batch_size_per_gpu: 1
      phase: val
    ]
  ]
  network_g:[
    type: EDLoRA
    pretrained_path: experiments/pretrained_models/stable-diffusion-v1-4
    finetune_cfg:[
      text_embedding:[
        enable_tuning: True
        lr: 0.001
      ]
      text_encoder:[
        enable_tuning: True
        lora_cfg:[
          rank: 4
          alpha: 1
          where: CLIPSdpaAttention
        ]
        lr: 1e-05
      ]
      unet:[
        enable_tuning: True
        lora_cfg:[
          rank: 4
          alpha: 1
          where: CrossAttention
        ]
        lr: 0.0001
      ]
    ]
    new_concept_token: <wearable_glasses_1>+<wearable_glasses_2>
    noise_offset: 0.01
    initializer_token: <rand-0.013>+glasses
    sd_version: v1
    test_sampler_type: ddim
  ]
  path:[
    pretrain_network_g: None
    experiments_root: /content/dlcv_final/Mix-of-Show/experiments/wearable_glasses
    models: /content/dlcv_final/Mix-of-Show/experiments/wearable_glasses/models
    training_states: /content/dlcv_final/Mix-of-Show/experiments/wearable_glasses/training_states
    log: /content/dlcv_final/Mix-of-Show/experiments/wearable_glasses
    visualization: /content/dlcv_final/Mix-of-Show/experiments/wearable_glasses/visualization
  ]
  train:[
    optim_g:[
      type: AdamW
      lr: 0.0
      scale_lr: False
      weight_decay: 0.01
      betas: [0.9, 0.999]
    ]
    kde_opt:[
      type: KDELoss
      loss_weight: 0.002
      bandwidth: 0.5
    ]
    drop_start_iter: -1
    unet_kv_drop_rate: 0.0
    scheduler:[
      type: LinearLR
      num_epochs: 1000
    ]
    total_iter: 1000
    warmup_iter: -1
  ]
  val:[
    val_freq: 1000.0
    save_img: True
    compose_visualize: True
    pbar: True
    suffix: None
    sample:[
      num_inference_steps: 50
      guidance_scale: 7.5
    ]
    metrics: None
  ]
  logger:[
    print_freq: 10
    save_checkpoint_freq: 200.0
    use_tb_logger: False
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: True
  rank: 0
  auto_resume: False
  is_train: True
  root_path: /content/dlcv_final/Mix-of-Show

2024-12-09 10:43:21,495 INFO: Transform [Resize] is created.
2024-12-09 10:43:21,496 INFO: Transform [HumanResizeCropFinal] is created.
2024-12-09 10:43:21,496 INFO: Transform [ToTensor] is created.
2024-12-09 10:43:21,496 INFO: Transform [Normalize] is created.
2024-12-09 10:43:21,496 INFO: Transform [ShuffleCaption] is created.
2024-12-09 10:43:21,496 INFO: Transform [EnhanceText] is created.
2024-12-09 10:43:21,496 INFO: Dataset [LoraDataset] - LoraDataset is built.
2024-12-09 10:43:21,496 INFO: Training statistics:
	Number of train images: 5
	Dataset enlarge ratio: 100
	Batch size per gpu: 1
	World size (gpu number): 1
	Require iter number per epoch: 500
	Total epochs: 2; iters: 1000.
2024-12-09 10:43:21,497 INFO: Dataset [PromptDataset] - PromptDataset is built.
2024-12-09 10:43:21,497 INFO: Number of val images/folders in PromptDataset: 1
2024-12-09 10:43:22,914 INFO: 49408 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,914 INFO: 49409 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,914 INFO: 49410 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,914 INFO: 49411 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,914 INFO: 49412 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,914 INFO: 49413 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,915 INFO: 49414 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,915 INFO: 49415 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,915 INFO: 49416 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,915 INFO: 49417 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,915 INFO: 49418 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,915 INFO: 49419 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,915 INFO: 49420 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,915 INFO: 49421 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,915 INFO: 49422 is random initialized by: <rand-0.013>
2024-12-09 10:43:22,916 INFO: 49423 is random initialized by: <rand-0.013>
2024-12-09 10:43:23,689 INFO: 49424 is random initialized by: glasses, 6116
2024-12-09 10:43:23,689 INFO: 49425 is random initialized by: glasses, 6116
2024-12-09 10:43:23,690 INFO: 49426 is random initialized by: glasses, 6116
2024-12-09 10:43:23,690 INFO: 49427 is random initialized by: glasses, 6116
2024-12-09 10:43:23,690 INFO: 49428 is random initialized by: glasses, 6116
2024-12-09 10:43:23,690 INFO: 49429 is random initialized by: glasses, 6116
2024-12-09 10:43:23,691 INFO: 49430 is random initialized by: glasses, 6116
2024-12-09 10:43:23,691 INFO: 49431 is random initialized by: glasses, 6116
2024-12-09 10:43:23,691 INFO: 49432 is random initialized by: glasses, 6116
2024-12-09 10:43:23,691 INFO: 49433 is random initialized by: glasses, 6116
2024-12-09 10:43:23,691 INFO: 49434 is random initialized by: glasses, 6116
2024-12-09 10:43:23,692 INFO: 49435 is random initialized by: glasses, 6116
2024-12-09 10:43:23,692 INFO: 49436 is random initialized by: glasses, 6116
2024-12-09 10:43:23,692 INFO: 49437 is random initialized by: glasses, 6116
2024-12-09 10:43:23,692 INFO: 49438 is random initialized by: glasses, 6116
2024-12-09 10:43:23,692 INFO: 49439 is random initialized by: glasses, 6116
2024-12-09 10:43:23,696 INFO: optimizing embedding using lr: 0.001
2024-12-09 10:43:23,711 INFO: optimizing text_encoder (48 LoRAs), using lr: 1e-05
2024-12-09 10:43:23,750 INFO: optimizing unet (128 LoRAs), using lr: 0.0001
2024-12-09 10:43:23,750 INFO: Network [EDLoRA] is created.
2024-12-09 10:43:25,515 INFO: Network: DistributedDataParallel - EDLoRA, with parameters: 1,067,351,979
2024-12-09 10:43:25,515 INFO: EDLoRA(
  (vae): AutoencoderKL(
    (encoder): Encoder(
      (conv_in): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (down_blocks): ModuleList(
        (0): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0-1): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (downsamplers): ModuleList(
            (0): Downsample2D(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
            )
          )
        )
        (1): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (downsamplers): ModuleList(
            (0): Downsample2D(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2))
            )
          )
        )
        (2): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (downsamplers): ModuleList(
            (0): Downsample2D(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2))
            )
          )
        )
        (3): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0-1): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
        )
      )
      (mid_block): UNetMidBlock2D(
        (attentions): ModuleList(
          (0): AttentionBlock(
            (group_norm): GroupNorm(32, 512, eps=1e-06, affine=True)
            (query): Linear(in_features=512, out_features=512, bias=True)
            (key): Linear(in_features=512, out_features=512, bias=True)
            (value): Linear(in_features=512, out_features=512, bias=True)
            (proj_attn): Linear(in_features=512, out_features=512, bias=True)
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
      )
      (conv_norm_out): GroupNorm(32, 512, eps=1e-06, affine=True)
      (conv_act): SiLU()
      (conv_out): Conv2d(512, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (decoder): Decoder(
      (conv_in): Conv2d(4, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (up_blocks): ModuleList(
        (0-1): 2 x UpDecoderBlock2D(
          (resnets): ModuleList(
            (0-2): 3 x ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (upsamplers): ModuleList(
            (0): Upsample2D(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
        )
        (2): UpDecoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1-2): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (upsamplers): ModuleList(
            (0): Upsample2D(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
        )
        (3): UpDecoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            )
            (1-2): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
        )
      )
      (mid_block): UNetMidBlock2D(
        (attentions): ModuleList(
          (0): AttentionBlock(
            (group_norm): GroupNorm(32, 512, eps=1e-06, affine=True)
            (query): Linear(in_features=512, out_features=512, bias=True)
            (key): Linear(in_features=512, out_features=512, bias=True)
            (value): Linear(in_features=512, out_features=512, bias=True)
            (proj_attn): Linear(in_features=512, out_features=512, bias=True)
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
      )
      (conv_norm_out): GroupNorm(32, 128, eps=1e-06, affine=True)
      (conv_act): SiLU()
      (conv_out): Conv2d(128, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (quant_conv): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
    (post_quant_conv): Conv2d(4, 4, kernel_size=(1, 1), stride=(1, 1))
  )
  (text_encoder): CLIPTextModel(
    (text_model): CLIPTextTransformer(
      (embeddings): CLIPTextEmbeddings(
        (token_embedding): Embedding(49440, 768)
        (position_embedding): Embedding(77, 768)
      )
      (encoder): CLIPEncoder(
        (layers): ModuleList(
          (0-11): 12 x CLIPEncoderLayer(
            (self_attn): CLIPSdpaAttention(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (layer_norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): CLIPMLP(
              (activation_fn): QuickGELUActivation()
              (fc1): Linear(in_features=768, out_features=3072, bias=True)
              (fc2): Linear(in_features=3072, out_features=768, bias=True)
            )
            (layer_norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (unet): UNet2DConditionModel(
    (conv_in): Conv2d(4, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (time_proj): Timesteps()
    (time_embedding): TimestepEmbedding(
      (linear_1): Linear(in_features=320, out_features=1280, bias=True)
      (act): SiLU()
      (linear_2): Linear(in_features=1280, out_features=1280, bias=True)
    )
    (down_blocks): ModuleList(
      (0): CrossAttnDownBlock2D(
        (attentions): ModuleList(
          (0-1): 2 x Transformer2DModel(
            (norm): GroupNorm(32, 320, eps=1e-06, affine=True)
            (proj_in): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=320, out_features=320, bias=False)
                  (to_v): Linear(in_features=320, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=320, out_features=2560, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=1280, out_features=320, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=768, out_features=320, bias=False)
                  (to_v): Linear(in_features=768, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 320, eps=1e-05, affine=True)
            (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=320, bias=True)
            (norm2): GroupNorm(32, 320, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
        (downsamplers): ModuleList(
          (0): Downsample2D(
            (conv): Conv2d(320, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
      )
      (1): CrossAttnDownBlock2D(
        (attentions): ModuleList(
          (0-1): 2 x Transformer2DModel(
            (norm): GroupNorm(32, 640, eps=1e-06, affine=True)
            (proj_in): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=640, out_features=640, bias=False)
                  (to_v): Linear(in_features=640, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=640, out_features=5120, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=2560, out_features=640, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=768, out_features=640, bias=False)
                  (to_v): Linear(in_features=768, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 320, eps=1e-05, affine=True)
            (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock2D(
            (norm1): GroupNorm(32, 640, eps=1e-05, affine=True)
            (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
        (downsamplers): ModuleList(
          (0): Downsample2D(
            (conv): Conv2d(640, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
      )
      (2): CrossAttnDownBlock2D(
        (attentions): ModuleList(
          (0-1): 2 x Transformer2DModel(
            (norm): GroupNorm(32, 1280, eps=1e-06, affine=True)
            (proj_in): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_v): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=1280, out_features=10240, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=5120, out_features=1280, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=768, out_features=1280, bias=False)
                  (to_v): Linear(in_features=768, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 640, eps=1e-05, affine=True)
            (conv1): Conv2d(640, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(640, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock2D(
            (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (conv1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
        (downsamplers): ModuleList(
          (0): Downsample2D(
            (conv): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
      )
      (3): DownBlock2D(
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (conv1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
      )
    )
    (up_blocks): ModuleList(
      (0): UpBlock2D(
        (resnets): ModuleList(
          (0-2): 3 x ResnetBlock2D(
            (norm1): GroupNorm(32, 2560, eps=1e-05, affine=True)
            (conv1): Conv2d(2560, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(2560, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (upsamplers): ModuleList(
          (0): Upsample2D(
            (conv): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (1): CrossAttnUpBlock2D(
        (attentions): ModuleList(
          (0-2): 3 x Transformer2DModel(
            (norm): GroupNorm(32, 1280, eps=1e-06, affine=True)
            (proj_in): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_v): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=1280, out_features=10240, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=5120, out_features=1280, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=768, out_features=1280, bias=False)
                  (to_v): Linear(in_features=768, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 2560, eps=1e-05, affine=True)
            (conv1): Conv2d(2560, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(2560, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): ResnetBlock2D(
            (norm1): GroupNorm(32, 1920, eps=1e-05, affine=True)
            (conv1): Conv2d(1920, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(1920, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (upsamplers): ModuleList(
          (0): Upsample2D(
            (conv): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (2): CrossAttnUpBlock2D(
        (attentions): ModuleList(
          (0-2): 3 x Transformer2DModel(
            (norm): GroupNorm(32, 640, eps=1e-06, affine=True)
            (proj_in): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=640, out_features=640, bias=False)
                  (to_v): Linear(in_features=640, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=640, out_features=5120, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=2560, out_features=640, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=768, out_features=640, bias=False)
                  (to_v): Linear(in_features=768, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 1920, eps=1e-05, affine=True)
            (conv1): Conv2d(1920, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(1920, 640, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock2D(
            (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (conv1): Conv2d(1280, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(1280, 640, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): ResnetBlock2D(
            (norm1): GroupNorm(32, 960, eps=1e-05, affine=True)
            (conv1): Conv2d(960, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(960, 640, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (upsamplers): ModuleList(
          (0): Upsample2D(
            (conv): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (3): CrossAttnUpBlock2D(
        (attentions): ModuleList(
          (0-2): 3 x Transformer2DModel(
            (norm): GroupNorm(32, 320, eps=1e-06, affine=True)
            (proj_in): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=320, out_features=320, bias=False)
                  (to_v): Linear(in_features=320, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=320, out_features=2560, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=1280, out_features=320, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=768, out_features=320, bias=False)
                  (to_v): Linear(in_features=768, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 960, eps=1e-05, affine=True)
            (conv1): Conv2d(960, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=320, bias=True)
            (norm2): GroupNorm(32, 320, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1))
          )
          (1-2): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 640, eps=1e-05, affine=True)
            (conv1): Conv2d(640, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=320, bias=True)
            (norm2): GroupNorm(32, 320, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(640, 320, kernel_size=(1, 1), stride=(1, 1))
          )
        )
      )
    )
    (mid_block): UNetMidBlock2DCrossAttn(
      (attentions): ModuleList(
        (0): Transformer2DModel(
          (norm): GroupNorm(32, 1280, eps=1e-06, affine=True)
          (proj_in): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
          (transformer_blocks): ModuleList(
            (0): BasicTransformerBlock(
              (attn1): CrossAttention(
                (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                (to_k): Linear(in_features=1280, out_features=1280, bias=False)
                (to_v): Linear(in_features=1280, out_features=1280, bias=False)
                (to_out): ModuleList(
                  (0): Linear(in_features=1280, out_features=1280, bias=True)
                  (1): Dropout(p=0.0, inplace=False)
                )
              )
              (ff): FeedForward(
                (net): ModuleList(
                  (0): GEGLU(
                    (proj): Linear(in_features=1280, out_features=10240, bias=True)
                  )
                  (1): Dropout(p=0.0, inplace=False)
                  (2): Linear(in_features=5120, out_features=1280, bias=True)
                )
              )
              (attn2): CrossAttention(
                (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                (to_k): Linear(in_features=768, out_features=1280, bias=False)
                (to_v): Linear(in_features=768, out_features=1280, bias=False)
                (to_out): ModuleList(
                  (0): Linear(in_features=1280, out_features=1280, bias=True)
                  (1): Dropout(p=0.0, inplace=False)
                )
              )
              (norm1): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              (norm3): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
            )
          )
          (proj_out): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (resnets): ModuleList(
        (0-1): 2 x ResnetBlock2D(
          (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
          (conv1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
          (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (nonlinearity): SiLU()
        )
      )
    )
    (conv_norm_out): GroupNorm(32, 320, eps=1e-05, affine=True)
    (conv_act): SiLU()
    (conv_out): Conv2d(320, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (text_encoder_lora): ModuleList(
    (0-47): 48 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=768, bias=False)
    )
  )
  (unet_lora): ModuleList(
    (0-4): 5 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (5-6): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (7-12): 6 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (13-14): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (15): LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (16-20): 5 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (21-22): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (23-28): 6 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (29-30): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (31): LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (32-36): 5 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (37-38): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (39-44): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (45-46): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (47-52): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (53-54): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (55-60): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (61-62): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (63-68): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (69-70): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (71): LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (72-76): 5 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (77-78): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (79-84): 6 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (85-86): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (87-92): 6 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (93-94): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (95): LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (96-100): 5 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (101-102): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (103-108): 6 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (109-110): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (111-116): 6 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (117-118): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (119): LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (120-124): 5 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (125-126): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (127): LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
  )
)
2024-12-09 10:43:25,519 INFO: Loss [KDELoss] is created.
2024-12-09 10:43:25,519 INFO: Scale learning rate to: 0.00e+00
2024-12-09 10:43:25,521 INFO: Model [EDLoraModel] is created.
2024-12-09 10:43:32,336 INFO: Use cuda prefetch dataloader
2024-12-09 10:43:32,336 INFO: Start training from epoch: 0, iter: 0
2024-12-09 10:43:56,893 INFO: [weara..][epoch:  0, iter:      10, lr:(9.910e-04,9.910e-06,9.910e-05,)] [eta: 0:16:40, time (data): 2.456 (0.684)] loss: -3.7909e-01 token_reg: -4.1070e-01 Norm_mean: 3.9188e-01 
2024-12-09 10:44:09,351 INFO: [weara..][epoch:  0, iter:      20, lr:(9.810e-04,9.810e-06,9.810e-05,)] [eta: 0:18:19, time (data): 1.851 (0.342)] loss: -3.4704e-01 token_reg: -4.1070e-01 Norm_mean: 4.0362e-01 
2024-12-09 10:44:21,860 INFO: [weara..][epoch:  0, iter:      30, lr:(9.710e-04,9.710e-06,9.710e-05,)] [eta: 0:18:48, time (data): 1.651 (0.228)] loss: -1.6562e-01 token_reg: -4.1070e-01 Norm_mean: 4.1339e-01 
2024-12-09 10:44:34,330 INFO: [weara..][epoch:  0, iter:      40, lr:(9.610e-04,9.610e-06,9.610e-05,)] [eta: 0:18:56, time (data): 1.550 (0.171)] loss: 8.1297e-01 token_reg: -4.1070e-01 Norm_mean: 4.2118e-01 
2024-12-09 10:44:46,745 INFO: [weara..][epoch:  0, iter:      50, lr:(9.510e-04,9.510e-06,9.510e-05,)] [eta: 0:18:54, time (data): 1.488 (0.137)] loss: -3.3634e-01 token_reg: -4.1070e-01 Norm_mean: 4.2835e-01 
2024-12-09 10:44:59,141 INFO: [weara..][epoch:  0, iter:      60, lr:(9.410e-04,9.410e-06,9.410e-05,)] [eta: 0:18:49, time (data): 1.447 (0.114)] loss: 4.6998e-01 token_reg: -4.1070e-01 Norm_mean: 4.3436e-01 
2024-12-09 10:45:11,517 INFO: [weara..][epoch:  0, iter:      70, lr:(9.310e-04,9.310e-06,9.310e-05,)] [eta: 0:18:42, time (data): 1.417 (0.098)] loss: -2.3024e-01 token_reg: -4.1069e-01 Norm_mean: 4.4138e-01 
2024-12-09 10:45:23,916 INFO: [weara..][epoch:  0, iter:      80, lr:(9.210e-04,9.210e-06,9.210e-05,)] [eta: 0:18:33, time (data): 1.395 (0.086)] loss: -3.8656e-01 token_reg: -4.1069e-01 Norm_mean: 4.4950e-01 
2024-12-09 10:45:36,312 INFO: [weara..][epoch:  0, iter:      90, lr:(9.110e-04,9.110e-06,9.110e-05,)] [eta: 0:18:24, time (data): 1.377 (0.076)] loss: -3.7898e-01 token_reg: -4.1069e-01 Norm_mean: 4.5734e-01 
2024-12-09 10:45:48,709 INFO: [weara..][epoch:  0, iter:     100, lr:(9.010e-04,9.010e-06,9.010e-05,)] [eta: 0:18:14, time (data): 1.364 (0.069)] loss: 7.2714e-03 token_reg: -4.1069e-01 Norm_mean: 4.6404e-01 
2024-12-09 10:46:01,142 INFO: [weara..][epoch:  0, iter:     110, lr:(8.910e-04,8.910e-06,8.910e-05,)] [eta: 0:18:04, time (data): 1.353 (0.063)] loss: -1.9051e-01 token_reg: -4.1069e-01 Norm_mean: 4.7021e-01 
2024-12-09 10:46:13,540 INFO: [weara..][epoch:  0, iter:     120, lr:(8.810e-04,8.810e-06,8.810e-05,)] [eta: 0:17:53, time (data): 1.343 (0.057)] loss: -2.3467e-01 token_reg: -4.1069e-01 Norm_mean: 4.7548e-01 
2024-12-09 10:46:25,945 INFO: [weara..][epoch:  0, iter:     130, lr:(8.710e-04,8.710e-06,8.710e-05,)] [eta: 0:17:42, time (data): 1.335 (0.053)] loss: 5.9881e-02 token_reg: -4.1069e-01 Norm_mean: 4.8090e-01 
2024-12-09 10:46:38,340 INFO: [weara..][epoch:  0, iter:     140, lr:(8.610e-04,8.610e-06,8.610e-05,)] [eta: 0:17:31, time (data): 1.328 (0.049)] loss: -3.8753e-01 token_reg: -4.1069e-01 Norm_mean: 4.8654e-01 
2024-12-09 10:46:50,739 INFO: [weara..][epoch:  0, iter:     150, lr:(8.510e-04,8.510e-06,8.510e-05,)] [eta: 0:17:20, time (data): 1.323 (0.046)] loss: -2.9980e-01 token_reg: -4.1069e-01 Norm_mean: 4.9281e-01 
2024-12-09 10:47:03,134 INFO: [weara..][epoch:  0, iter:     160, lr:(8.410e-04,8.410e-06,8.410e-05,)] [eta: 0:17:08, time (data): 1.317 (0.043)] loss: -3.8261e-01 token_reg: -4.1069e-01 Norm_mean: 4.9889e-01 
2024-12-09 10:47:15,541 INFO: [weara..][epoch:  0, iter:     170, lr:(8.310e-04,8.310e-06,8.310e-05,)] [eta: 0:16:57, time (data): 1.313 (0.041)] loss: -3.9432e-01 token_reg: -4.1068e-01 Norm_mean: 5.0392e-01 
2024-12-09 10:47:27,936 INFO: [weara..][epoch:  0, iter:     180, lr:(8.210e-04,8.210e-06,8.210e-05,)] [eta: 0:16:45, time (data): 1.309 (0.038)] loss: -3.3061e-01 token_reg: -4.1068e-01 Norm_mean: 5.0763e-01 
2024-12-09 10:47:40,333 INFO: [weara..][epoch:  0, iter:     190, lr:(8.110e-04,8.110e-06,8.110e-05,)] [eta: 0:16:33, time (data): 1.305 (0.036)] loss: -3.8984e-01 token_reg: -4.1068e-01 Norm_mean: 5.1207e-01 
2024-12-09 10:47:52,727 INFO: [weara..][epoch:  0, iter:     200, lr:(8.010e-04,8.010e-06,8.010e-05,)] [eta: 0:16:21, time (data): 1.302 (0.035)] loss: 5.2536e-01 token_reg: -4.1068e-01 Norm_mean: 5.1659e-01 
2024-12-09 10:47:52,729 INFO: Saving models and training states.
2024-12-09 10:47:52,746 INFO: text_encoder moved: 5.7221495580961346e-05
2024-12-09 10:47:52,793 INFO: unet moved: 0.0006456047185565694
2024-12-09 10:48:05,866 INFO: [weara..][epoch:  0, iter:     210, lr:(7.910e-04,7.910e-06,7.910e-05,)] [eta: 0:16:12, time (data): 1.239 (0.001)] loss: 3.2878e-01 token_reg: -4.1068e-01 Norm_mean: 5.2088e-01 
2024-12-09 10:48:18,261 INFO: [weara..][epoch:  0, iter:     220, lr:(7.810e-04,7.810e-06,7.810e-05,)] [eta: 0:16:00, time (data): 1.239 (0.000)] loss: 1.3083e+00 token_reg: -4.1068e-01 Norm_mean: 5.2454e-01 
2024-12-09 10:48:30,656 INFO: [weara..][epoch:  0, iter:     230, lr:(7.710e-04,7.710e-06,7.710e-05,)] [eta: 0:15:48, time (data): 1.239 (0.000)] loss: -5.3333e-02 token_reg: -4.1068e-01 Norm_mean: 5.2735e-01 
2024-12-09 10:48:43,056 INFO: [weara..][epoch:  0, iter:     240, lr:(7.610e-04,7.610e-06,7.610e-05,)] [eta: 0:15:36, time (data): 1.239 (0.001)] loss: 7.3994e-01 token_reg: -4.1068e-01 Norm_mean: 5.2991e-01 
2024-12-09 10:48:55,474 INFO: [weara..][epoch:  0, iter:     250, lr:(7.510e-04,7.510e-06,7.510e-05,)] [eta: 0:15:24, time (data): 1.240 (0.001)] loss: 9.7612e-01 token_reg: -4.1068e-01 Norm_mean: 5.3264e-01 
2024-12-09 10:49:07,895 INFO: [weara..][epoch:  0, iter:     260, lr:(7.410e-04,7.410e-06,7.410e-05,)] [eta: 0:15:12, time (data): 1.240 (0.001)] loss: 1.0942e-01 token_reg: -4.1068e-01 Norm_mean: 5.3527e-01 
2024-12-09 10:49:20,300 INFO: [weara..][epoch:  0, iter:     270, lr:(7.310e-04,7.310e-06,7.310e-05,)] [eta: 0:14:59, time (data): 1.240 (0.001)] loss: 4.0313e-01 token_reg: -4.1068e-01 Norm_mean: 5.3798e-01 
2024-12-09 10:49:32,697 INFO: [weara..][epoch:  0, iter:     280, lr:(7.210e-04,7.210e-06,7.210e-05,)] [eta: 0:14:47, time (data): 1.240 (0.001)] loss: -2.5321e-01 token_reg: -4.1068e-01 Norm_mean: 5.4170e-01 
2024-12-09 10:49:45,102 INFO: [weara..][epoch:  0, iter:     290, lr:(7.110e-04,7.110e-06,7.110e-05,)] [eta: 0:14:35, time (data): 1.240 (0.001)] loss: -2.0251e-02 token_reg: -4.1068e-01 Norm_mean: 5.4552e-01 
2024-12-09 10:49:57,508 INFO: [weara..][epoch:  0, iter:     300, lr:(7.010e-04,7.010e-06,7.010e-05,)] [eta: 0:14:23, time (data): 1.240 (0.001)] loss: 2.2759e-01 token_reg: -4.1068e-01 Norm_mean: 5.4884e-01 
2024-12-09 10:50:09,908 INFO: [weara..][epoch:  0, iter:     310, lr:(6.910e-04,6.910e-06,6.910e-05,)] [eta: 0:14:11, time (data): 1.240 (0.001)] loss: -3.4228e-01 token_reg: -4.1068e-01 Norm_mean: 5.5207e-01 
2024-12-09 10:50:22,320 INFO: [weara..][epoch:  0, iter:     320, lr:(6.810e-04,6.810e-06,6.810e-05,)] [eta: 0:13:58, time (data): 1.240 (0.001)] loss: -1.4961e-01 token_reg: -4.1068e-01 Norm_mean: 5.5514e-01 
2024-12-09 10:50:34,717 INFO: [weara..][epoch:  0, iter:     330, lr:(6.710e-04,6.710e-06,6.710e-05,)] [eta: 0:13:46, time (data): 1.240 (0.001)] loss: -3.8747e-01 token_reg: -4.1068e-01 Norm_mean: 5.5787e-01 
2024-12-09 10:50:47,113 INFO: [weara..][epoch:  0, iter:     340, lr:(6.610e-04,6.610e-06,6.610e-05,)] [eta: 0:13:34, time (data): 1.240 (0.001)] loss: 1.0009e+00 token_reg: -4.1067e-01 Norm_mean: 5.5979e-01 
2024-12-09 10:50:59,507 INFO: [weara..][epoch:  0, iter:     350, lr:(6.510e-04,6.510e-06,6.510e-05,)] [eta: 0:13:21, time (data): 1.240 (0.001)] loss: 2.4466e-01 token_reg: -4.1067e-01 Norm_mean: 5.6192e-01 
2024-12-09 10:51:11,905 INFO: [weara..][epoch:  0, iter:     360, lr:(6.410e-04,6.410e-06,6.410e-05,)] [eta: 0:13:09, time (data): 1.240 (0.001)] loss: -1.8851e-01 token_reg: -4.1067e-01 Norm_mean: 5.6381e-01 
2024-12-09 10:51:24,302 INFO: [weara..][epoch:  0, iter:     370, lr:(6.310e-04,6.310e-06,6.310e-05,)] [eta: 0:12:57, time (data): 1.240 (0.001)] loss: -3.8093e-01 token_reg: -4.1067e-01 Norm_mean: 5.6550e-01 
2024-12-09 10:51:36,697 INFO: [weara..][epoch:  0, iter:     380, lr:(6.210e-04,6.210e-06,6.210e-05,)] [eta: 0:12:45, time (data): 1.240 (0.001)] loss: -3.7965e-01 token_reg: -4.1067e-01 Norm_mean: 5.6712e-01 
2024-12-09 10:51:49,093 INFO: [weara..][epoch:  0, iter:     390, lr:(6.110e-04,6.110e-06,6.110e-05,)] [eta: 0:12:32, time (data): 1.240 (0.001)] loss: 4.0228e-01 token_reg: -4.1067e-01 Norm_mean: 5.6912e-01 
2024-12-09 10:52:01,490 INFO: [weara..][epoch:  0, iter:     400, lr:(6.010e-04,6.010e-06,6.010e-05,)] [eta: 0:12:20, time (data): 1.240 (0.001)] loss: -3.5998e-01 token_reg: -4.1067e-01 Norm_mean: 5.7216e-01 
2024-12-09 10:52:01,491 INFO: Saving models and training states.
2024-12-09 10:52:01,508 INFO: text_encoder moved: 7.747688096060301e-05
2024-12-09 10:52:01,553 INFO: unet moved: 0.0009088553788387799
2024-12-09 10:52:14,616 INFO: [weara..][epoch:  0, iter:     410, lr:(5.910e-04,5.910e-06,5.910e-05,)] [eta: 0:12:09, time (data): 1.240 (0.001)] loss: -3.2619e-01 token_reg: -4.1067e-01 Norm_mean: 5.7497e-01 
2024-12-09 10:52:27,022 INFO: [weara..][epoch:  0, iter:     420, lr:(5.810e-04,5.810e-06,5.810e-05,)] [eta: 0:11:56, time (data): 1.240 (0.000)] loss: 1.3255e-01 token_reg: -4.1067e-01 Norm_mean: 5.7760e-01 
2024-12-09 10:52:39,437 INFO: [weara..][epoch:  0, iter:     430, lr:(5.710e-04,5.710e-06,5.710e-05,)] [eta: 0:11:44, time (data): 1.241 (0.000)] loss: -3.7079e-01 token_reg: -4.1067e-01 Norm_mean: 5.7998e-01 
2024-12-09 10:52:51,832 INFO: [weara..][epoch:  0, iter:     440, lr:(5.610e-04,5.610e-06,5.610e-05,)] [eta: 0:11:32, time (data): 1.240 (0.000)] loss: -3.3958e-01 token_reg: -4.1067e-01 Norm_mean: 5.8195e-01 
2024-12-09 10:53:04,228 INFO: [weara..][epoch:  0, iter:     450, lr:(5.510e-04,5.510e-06,5.510e-05,)] [eta: 0:11:19, time (data): 1.240 (0.000)] loss: -3.6116e-01 token_reg: -4.1067e-01 Norm_mean: 5.8353e-01 
2024-12-09 10:53:16,625 INFO: [weara..][epoch:  0, iter:     460, lr:(5.410e-04,5.410e-06,5.410e-05,)] [eta: 0:11:07, time (data): 1.240 (0.000)] loss: -3.2600e-01 token_reg: -4.1067e-01 Norm_mean: 5.8505e-01 
2024-12-09 10:53:29,022 INFO: [weara..][epoch:  0, iter:     470, lr:(5.310e-04,5.310e-06,5.310e-05,)] [eta: 0:10:55, time (data): 1.240 (0.000)] loss: -1.9705e-01 token_reg: -4.1067e-01 Norm_mean: 5.8678e-01 
2024-12-09 10:53:41,417 INFO: [weara..][epoch:  0, iter:     480, lr:(5.210e-04,5.210e-06,5.210e-05,)] [eta: 0:10:42, time (data): 1.240 (0.000)] loss: -3.5706e-01 token_reg: -4.1067e-01 Norm_mean: 5.8859e-01 
2024-12-09 10:53:53,814 INFO: [weara..][epoch:  0, iter:     490, lr:(5.110e-04,5.110e-06,5.110e-05,)] [eta: 0:10:30, time (data): 1.240 (0.000)] loss: -2.1782e-01 token_reg: -4.1067e-01 Norm_mean: 5.9020e-01 
2024-12-09 10:54:07,545 INFO: [weara..][epoch:  0, iter:     500, lr:(5.010e-04,5.010e-06,5.010e-05,)] [eta: 0:10:19, time (data): 1.253 (0.014)] loss: 7.0122e-01 token_reg: -4.1067e-01 Norm_mean: 5.9164e-01 
2024-12-09 10:54:26,804 INFO: [weara..][epoch:  1, iter:     510, lr:(4.910e-04,4.910e-06,4.910e-05,)] [eta: 0:10:13, time (data): 1.316 (0.077)] loss: 9.6779e-01 token_reg: -4.1067e-01 Norm_mean: 5.9293e-01 
2024-12-09 10:54:39,227 INFO: [weara..][epoch:  1, iter:     520, lr:(4.810e-04,4.810e-06,4.810e-05,)] [eta: 0:10:00, time (data): 1.309 (0.070)] loss: 1.4269e+00 token_reg: -4.1067e-01 Norm_mean: 5.9421e-01 
2024-12-09 10:54:51,677 INFO: [weara..][epoch:  1, iter:     530, lr:(4.710e-04,4.710e-06,4.710e-05,)] [eta: 0:09:48, time (data): 1.304 (0.065)] loss: 1.1830e-01 token_reg: -4.1067e-01 Norm_mean: 5.9544e-01 
2024-12-09 10:55:04,090 INFO: [weara..][epoch:  1, iter:     540, lr:(4.610e-04,4.610e-06,4.610e-05,)] [eta: 0:09:35, time (data): 1.300 (0.060)] loss: 2.8438e-01 token_reg: -4.1067e-01 Norm_mean: 5.9670e-01 
2024-12-09 10:55:16,483 INFO: [weara..][epoch:  1, iter:     550, lr:(4.510e-04,4.510e-06,4.510e-05,)] [eta: 0:09:22, time (data): 1.296 (0.056)] loss: 9.3045e-01 token_reg: -4.1067e-01 Norm_mean: 5.9816e-01 
2024-12-09 10:55:28,877 INFO: [weara..][epoch:  1, iter:     560, lr:(4.410e-04,4.410e-06,4.410e-05,)] [eta: 0:09:10, time (data): 1.292 (0.053)] loss: 4.1352e-01 token_reg: -4.1067e-01 Norm_mean: 5.9972e-01 
2024-12-09 10:55:41,254 INFO: [weara..][epoch:  1, iter:     570, lr:(4.310e-04,4.310e-06,4.310e-05,)] [eta: 0:08:57, time (data): 1.289 (0.050)] loss: -3.8498e-01 token_reg: -4.1067e-01 Norm_mean: 6.0110e-01 
2024-12-09 10:55:53,645 INFO: [weara..][epoch:  1, iter:     580, lr:(4.210e-04,4.210e-06,4.210e-05,)] [eta: 0:08:44, time (data): 1.286 (0.047)] loss: -2.0836e-01 token_reg: -4.1067e-01 Norm_mean: 6.0222e-01 
2024-12-09 10:56:06,049 INFO: [weara..][epoch:  1, iter:     590, lr:(4.110e-04,4.110e-06,4.110e-05,)] [eta: 0:08:32, time (data): 1.284 (0.044)] loss: 5.3580e-01 token_reg: -4.1067e-01 Norm_mean: 6.0311e-01 
2024-12-09 10:56:18,448 INFO: [weara..][epoch:  1, iter:     600, lr:(4.010e-04,4.010e-06,4.010e-05,)] [eta: 0:08:19, time (data): 1.281 (0.042)] loss: 5.4064e-01 token_reg: -4.1067e-01 Norm_mean: 6.0391e-01 
2024-12-09 10:56:18,450 INFO: Saving models and training states.
2024-12-09 10:56:18,462 INFO: text_encoder moved: 9.099211941550796e-05
2024-12-09 10:56:18,495 INFO: unet moved: 0.0010935608829640842
2024-12-09 10:56:31,552 INFO: [weara..][epoch:  1, iter:     610, lr:(3.910e-04,3.910e-06,3.910e-05,)] [eta: 0:08:07, time (data): 1.240 (0.000)] loss: -3.8206e-01 token_reg: -4.1067e-01 Norm_mean: 6.0472e-01 
2024-12-09 10:56:43,956 INFO: [weara..][epoch:  1, iter:     620, lr:(3.810e-04,3.810e-06,3.810e-05,)] [eta: 0:07:54, time (data): 1.240 (0.000)] loss: 5.6864e-01 token_reg: -4.1067e-01 Norm_mean: 6.0532e-01 
2024-12-09 10:56:56,354 INFO: [weara..][epoch:  1, iter:     630, lr:(3.710e-04,3.710e-06,3.710e-05,)] [eta: 0:07:42, time (data): 1.240 (0.001)] loss: -3.4047e-02 token_reg: -4.1067e-01 Norm_mean: 6.0597e-01 
2024-12-09 10:57:08,748 INFO: [weara..][epoch:  1, iter:     640, lr:(3.610e-04,3.610e-06,3.610e-05,)] [eta: 0:07:29, time (data): 1.240 (0.001)] loss: 2.2600e-01 token_reg: -4.1067e-01 Norm_mean: 6.0718e-01 
2024-12-09 10:57:21,146 INFO: [weara..][epoch:  1, iter:     650, lr:(3.510e-04,3.510e-06,3.510e-05,)] [eta: 0:07:17, time (data): 1.240 (0.001)] loss: 1.5419e+00 token_reg: -4.1067e-01 Norm_mean: 6.0871e-01 
2024-12-09 10:57:33,540 INFO: [weara..][epoch:  1, iter:     660, lr:(3.410e-04,3.410e-06,3.410e-05,)] [eta: 0:07:04, time (data): 1.240 (0.001)] loss: -2.8336e-01 token_reg: -4.1066e-01 Norm_mean: 6.0977e-01 
2024-12-09 10:57:45,936 INFO: [weara..][epoch:  1, iter:     670, lr:(3.310e-04,3.310e-06,3.310e-05,)] [eta: 0:06:51, time (data): 1.240 (0.001)] loss: -3.9813e-01 token_reg: -4.1066e-01 Norm_mean: 6.1050e-01 
2024-12-09 10:57:58,331 INFO: [weara..][epoch:  1, iter:     680, lr:(3.210e-04,3.210e-06,3.210e-05,)] [eta: 0:06:39, time (data): 1.240 (0.001)] loss: 4.5088e-01 token_reg: -4.1066e-01 Norm_mean: 6.1117e-01 
2024-12-09 10:58:10,728 INFO: [weara..][epoch:  1, iter:     690, lr:(3.110e-04,3.110e-06,3.110e-05,)] [eta: 0:06:26, time (data): 1.240 (0.001)] loss: -1.7780e-01 token_reg: -4.1066e-01 Norm_mean: 6.1184e-01 
2024-12-09 10:58:23,125 INFO: [weara..][epoch:  1, iter:     700, lr:(3.010e-04,3.010e-06,3.010e-05,)] [eta: 0:06:14, time (data): 1.240 (0.001)] loss: -2.3472e-01 token_reg: -4.1066e-01 Norm_mean: 6.1251e-01 
2024-12-09 10:58:35,518 INFO: [weara..][epoch:  1, iter:     710, lr:(2.910e-04,2.910e-06,2.910e-05,)] [eta: 0:06:01, time (data): 1.240 (0.001)] loss: -5.6899e-02 token_reg: -4.1066e-01 Norm_mean: 6.1298e-01 
2024-12-09 10:58:47,918 INFO: [weara..][epoch:  1, iter:     720, lr:(2.810e-04,2.810e-06,2.810e-05,)] [eta: 0:05:49, time (data): 1.240 (0.001)] loss: -3.9980e-03 token_reg: -4.1066e-01 Norm_mean: 6.1336e-01 
2024-12-09 10:59:00,311 INFO: [weara..][epoch:  1, iter:     730, lr:(2.710e-04,2.710e-06,2.710e-05,)] [eta: 0:05:36, time (data): 1.240 (0.001)] loss: -3.7361e-01 token_reg: -4.1066e-01 Norm_mean: 6.1387e-01 
2024-12-09 10:59:12,709 INFO: [weara..][epoch:  1, iter:     740, lr:(2.610e-04,2.610e-06,2.610e-05,)] [eta: 0:05:23, time (data): 1.240 (0.001)] loss: -3.1389e-01 token_reg: -4.1066e-01 Norm_mean: 6.1437e-01 
2024-12-09 10:59:25,104 INFO: [weara..][epoch:  1, iter:     750, lr:(2.510e-04,2.510e-06,2.510e-05,)] [eta: 0:05:11, time (data): 1.240 (0.001)] loss: -2.7791e-01 token_reg: -4.1066e-01 Norm_mean: 6.1479e-01 
2024-12-09 10:59:37,502 INFO: [weara..][epoch:  1, iter:     760, lr:(2.410e-04,2.410e-06,2.410e-05,)] [eta: 0:04:58, time (data): 1.240 (0.001)] loss: 1.1290e+00 token_reg: -4.1066e-01 Norm_mean: 6.1513e-01 
2024-12-09 10:59:49,895 INFO: [weara..][epoch:  1, iter:     770, lr:(2.310e-04,2.310e-06,2.310e-05,)] [eta: 0:04:46, time (data): 1.240 (0.001)] loss: -3.2811e-01 token_reg: -4.1066e-01 Norm_mean: 6.1547e-01 
2024-12-09 11:00:02,292 INFO: [weara..][epoch:  1, iter:     780, lr:(2.210e-04,2.210e-06,2.210e-05,)] [eta: 0:04:33, time (data): 1.240 (0.001)] loss: -3.6992e-01 token_reg: -4.1066e-01 Norm_mean: 6.1575e-01 
2024-12-09 11:00:14,689 INFO: [weara..][epoch:  1, iter:     790, lr:(2.110e-04,2.110e-06,2.110e-05,)] [eta: 0:04:21, time (data): 1.240 (0.001)] loss: -2.6331e-01 token_reg: -4.1066e-01 Norm_mean: 6.1594e-01 
2024-12-09 11:00:27,085 INFO: [weara..][epoch:  1, iter:     800, lr:(2.010e-04,2.010e-06,2.010e-05,)] [eta: 0:04:08, time (data): 1.240 (0.001)] loss: -7.8055e-02 token_reg: -4.1066e-01 Norm_mean: 6.1610e-01 
2024-12-09 11:00:27,086 INFO: Saving models and training states.
2024-12-09 11:00:27,101 INFO: text_encoder moved: 9.743092080801337e-05
2024-12-09 11:00:27,134 INFO: unet moved: 0.0011765842850763875
2024-12-09 11:00:40,203 INFO: [weara..][epoch:  1, iter:     810, lr:(1.910e-04,1.910e-06,1.910e-05,)] [eta: 0:03:56, time (data): 1.241 (0.001)] loss: 2.2268e-01 token_reg: -4.1066e-01 Norm_mean: 6.1625e-01 
2024-12-09 11:00:52,599 INFO: [weara..][epoch:  1, iter:     820, lr:(1.810e-04,1.810e-06,1.810e-05,)] [eta: 0:03:43, time (data): 1.240 (0.001)] loss: -3.9162e-01 token_reg: -4.1066e-01 Norm_mean: 6.1648e-01 
2024-12-09 11:01:04,994 INFO: [weara..][epoch:  1, iter:     830, lr:(1.710e-04,1.710e-06,1.710e-05,)] [eta: 0:03:31, time (data): 1.240 (0.001)] loss: 1.6262e-01 token_reg: -4.1066e-01 Norm_mean: 6.1666e-01 
2024-12-09 11:01:17,390 INFO: [weara..][epoch:  1, iter:     840, lr:(1.610e-04,1.610e-06,1.610e-05,)] [eta: 0:03:18, time (data): 1.240 (0.001)] loss: -2.8750e-01 token_reg: -4.1066e-01 Norm_mean: 6.1681e-01 
2024-12-09 11:01:29,786 INFO: [weara..][epoch:  1, iter:     850, lr:(1.510e-04,1.510e-06,1.510e-05,)] [eta: 0:03:06, time (data): 1.240 (0.001)] loss: 1.6577e+00 token_reg: -4.1066e-01 Norm_mean: 6.1694e-01 
2024-12-09 11:01:42,184 INFO: [weara..][epoch:  1, iter:     860, lr:(1.410e-04,1.410e-06,1.410e-05,)] [eta: 0:02:53, time (data): 1.240 (0.001)] loss: -2.9075e-01 token_reg: -4.1066e-01 Norm_mean: 6.1708e-01 
2024-12-09 11:01:54,578 INFO: [weara..][epoch:  1, iter:     870, lr:(1.310e-04,1.310e-06,1.310e-05,)] [eta: 0:02:41, time (data): 1.240 (0.000)] loss: -1.7679e-01 token_reg: -4.1066e-01 Norm_mean: 6.1722e-01 
2024-12-09 11:02:06,992 INFO: [weara..][epoch:  1, iter:     880, lr:(1.210e-04,1.210e-06,1.210e-05,)] [eta: 0:02:28, time (data): 1.240 (0.000)] loss: -4.5149e-02 token_reg: -4.1066e-01 Norm_mean: 6.1734e-01 
2024-12-09 11:02:19,390 INFO: [weara..][epoch:  1, iter:     890, lr:(1.110e-04,1.110e-06,1.110e-05,)] [eta: 0:02:16, time (data): 1.240 (0.000)] loss: 1.2789e+00 token_reg: -4.1066e-01 Norm_mean: 6.1743e-01 
2024-12-09 11:02:31,786 INFO: [weara..][epoch:  1, iter:     900, lr:(1.010e-04,1.010e-06,1.010e-05,)] [eta: 0:02:03, time (data): 1.240 (0.000)] loss: 9.0374e-01 token_reg: -4.1066e-01 Norm_mean: 6.1748e-01 
2024-12-09 11:02:44,181 INFO: [weara..][epoch:  1, iter:     910, lr:(9.100e-05,9.100e-07,9.100e-06,)] [eta: 0:01:51, time (data): 1.240 (0.000)] loss: 1.9957e-01 token_reg: -4.1066e-01 Norm_mean: 6.1750e-01 
2024-12-09 11:02:56,578 INFO: [weara..][epoch:  1, iter:     920, lr:(8.100e-05,8.100e-07,8.100e-06,)] [eta: 0:01:38, time (data): 1.240 (0.000)] loss: -2.4627e-01 token_reg: -4.1066e-01 Norm_mean: 6.1752e-01 
2024-12-09 11:03:08,975 INFO: [weara..][epoch:  1, iter:     930, lr:(7.100e-05,7.100e-07,7.100e-06,)] [eta: 0:01:26, time (data): 1.240 (0.000)] loss: 1.1098e+00 token_reg: -4.1066e-01 Norm_mean: 6.1753e-01 
2024-12-09 11:03:21,370 INFO: [weara..][epoch:  1, iter:     940, lr:(6.100e-05,6.100e-07,6.100e-06,)] [eta: 0:01:13, time (data): 1.240 (0.000)] loss: 8.6560e-02 token_reg: -4.1066e-01 Norm_mean: 6.1753e-01 
2024-12-09 11:03:33,766 INFO: [weara..][epoch:  1, iter:     950, lr:(5.100e-05,5.100e-07,5.100e-06,)] [eta: 0:01:01, time (data): 1.240 (0.000)] loss: -9.6637e-02 token_reg: -4.1066e-01 Norm_mean: 6.1752e-01 
2024-12-09 11:03:46,183 INFO: [weara..][epoch:  1, iter:     960, lr:(4.100e-05,4.100e-07,4.100e-06,)] [eta: 0:00:48, time (data): 1.240 (0.000)] loss: -3.9829e-01 token_reg: -4.1066e-01 Norm_mean: 6.1751e-01 
2024-12-09 11:03:58,579 INFO: [weara..][epoch:  1, iter:     970, lr:(3.100e-05,3.100e-07,3.100e-06,)] [eta: 0:00:36, time (data): 1.240 (0.000)] loss: 4.4540e-01 token_reg: -4.1066e-01 Norm_mean: 6.1750e-01 
2024-12-09 11:04:10,974 INFO: [weara..][epoch:  1, iter:     980, lr:(2.100e-05,2.100e-07,2.100e-06,)] [eta: 0:00:23, time (data): 1.240 (0.000)] loss: 1.6257e+00 token_reg: -4.1066e-01 Norm_mean: 6.1749e-01 
2024-12-09 11:04:23,370 INFO: [weara..][epoch:  1, iter:     990, lr:(1.100e-05,1.100e-07,1.100e-06,)] [eta: 0:00:11, time (data): 1.240 (0.001)] loss: -1.1872e-01 token_reg: -4.1066e-01 Norm_mean: 6.1748e-01 
2024-12-09 11:04:37,104 INFO: [weara..][epoch:  1, iter:   1,000, lr:(1.000e-06,1.000e-08,1.000e-07,)] [eta: -1 day, 23:59:59, time (data): 1.247 (0.007)] loss: -7.7789e-02 token_reg: -4.1066e-01 Norm_mean: 6.1748e-01 
2024-12-09 11:04:37,105 INFO: Saving models and training states.
2024-12-09 11:04:37,121 INFO: text_encoder moved: 9.970026182296958e-05
2024-12-09 11:04:37,163 INFO: unet moved: 0.0012036766697747225
2024-12-09 11:05:23,755 INFO: End of training. Time consumed: 0:21:51
2024-12-09 11:05:23,755 INFO: Save the latest model.
2024-12-09 11:05:23,771 INFO: text_encoder moved: 9.970026182296958e-05
2024-12-09 11:05:23,816 INFO: unet moved: 0.0012036766697747225
