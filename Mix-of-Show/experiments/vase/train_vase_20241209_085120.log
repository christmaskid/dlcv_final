2024-12-09 08:51:20,457 INFO: 
Version Information: 
OpenStory
	PyTorch: 2.3.1+cu121
	TorchVision: 0.18.1+cu121
2024-12-09 08:51:20,457 INFO: 
  name: vase
  model_type: EDLoraModel
  world_size: 1
  num_gpu: 1
  manual_seed: 0
  datasets:[
    train:[
      name: LoraDataset
      type: LoraDataset
      concept_list: /content/Data/jsons/vase.json
      use_caption: True
      instance_transform: [OrderedDict([('type', 'Resize'), ('size', 512)]), OrderedDict([('type', 'HumanResizeCropFinal'), ('size', 512), ('crop_p', 0.5)]), OrderedDict([('type', 'ToTensor')]), OrderedDict([('type', 'Normalize'), ('mean', [0.5]), ('std', [0.5])]), OrderedDict([('type', 'ShuffleCaption'), ('keep_token_num', 1)]), OrderedDict([('type', 'EnhanceText'), ('enhance_type', 'human')])]
      replace_mapping:[
        <TOK>: <vase_1> <vase_2>
      ]
      dataset_enlarge_ratio: 100
      use_shuffle: True
      num_worker_per_gpu: 2
      batch_size_per_gpu: 1
      pin_memory: True
      prefetch_mode: cuda
      phase: train
    ]
    val_vis:[
      name: PromptDataset
      type: PromptDataset
      prompts: /content/dlcv_final/Mix-of-Show/datasets/validation_prompts/val.txt
      num_samples_per_prompt: 1
      latent_size: [4, 64, 64]
      replace_mapping:[
        <TOK>: <vase_1> <vase_2>
      ]
      use_shuffle: False
      num_worker_per_gpu: 2
      batch_size_per_gpu: 1
      phase: val
    ]
  ]
  network_g:[
    type: EDLoRA
    pretrained_path: experiments/pretrained_models/stable-diffusion-v1-4
    finetune_cfg:[
      text_embedding:[
        enable_tuning: True
        lr: 0.001
      ]
      text_encoder:[
        enable_tuning: True
        lora_cfg:[
          rank: 4
          alpha: 1
          where: CLIPSdpaAttention
        ]
        lr: 1e-05
      ]
      unet:[
        enable_tuning: True
        lora_cfg:[
          rank: 4
          alpha: 1
          where: CrossAttention
        ]
        lr: 0.0001
      ]
    ]
    new_concept_token: <vase_1>+<vase_2>
    noise_offset: 0.01
    initializer_token: <rand-0.013>+vase
    sd_version: v1
    test_sampler_type: ddim
  ]
  path:[
    pretrain_network_g: None
    experiments_root: /content/dlcv_final/Mix-of-Show/experiments/vase
    models: /content/dlcv_final/Mix-of-Show/experiments/vase/models
    training_states: /content/dlcv_final/Mix-of-Show/experiments/vase/training_states
    log: /content/dlcv_final/Mix-of-Show/experiments/vase
    visualization: /content/dlcv_final/Mix-of-Show/experiments/vase/visualization
  ]
  train:[
    optim_g:[
      type: AdamW
      lr: 0.0
      scale_lr: False
      weight_decay: 0.01
      betas: [0.9, 0.999]
    ]
    kde_opt:[
      type: KDELoss
      loss_weight: 0.002
      bandwidth: 0.5
    ]
    drop_start_iter: -1
    unet_kv_drop_rate: 0.0
    scheduler:[
      type: LinearLR
      num_epochs: 1000
    ]
    total_iter: 1000
    warmup_iter: -1
  ]
  val:[
    val_freq: 1000.0
    save_img: True
    compose_visualize: True
    pbar: True
    suffix: None
    sample:[
      num_inference_steps: 50
      guidance_scale: 7.5
    ]
    metrics: None
  ]
  logger:[
    print_freq: 10
    save_checkpoint_freq: 200.0
    use_tb_logger: False
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: True
  rank: 0
  auto_resume: False
  is_train: True
  root_path: /content/dlcv_final/Mix-of-Show

2024-12-09 08:51:20,458 INFO: Transform [Resize] is created.
2024-12-09 08:51:20,458 INFO: Transform [HumanResizeCropFinal] is created.
2024-12-09 08:51:20,458 INFO: Transform [ToTensor] is created.
2024-12-09 08:51:20,458 INFO: Transform [Normalize] is created.
2024-12-09 08:51:20,458 INFO: Transform [ShuffleCaption] is created.
2024-12-09 08:51:20,459 INFO: Transform [EnhanceText] is created.
2024-12-09 08:51:20,459 INFO: Dataset [LoraDataset] - LoraDataset is built.
2024-12-09 08:51:20,459 INFO: Training statistics:
	Number of train images: 6
	Dataset enlarge ratio: 100
	Batch size per gpu: 1
	World size (gpu number): 1
	Require iter number per epoch: 600
	Total epochs: 2; iters: 1000.
2024-12-09 08:51:20,459 INFO: Dataset [PromptDataset] - PromptDataset is built.
2024-12-09 08:51:20,459 INFO: Number of val images/folders in PromptDataset: 1
2024-12-09 08:51:21,723 INFO: 49408 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,724 INFO: 49409 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,724 INFO: 49410 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,724 INFO: 49411 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,724 INFO: 49412 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,724 INFO: 49413 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,724 INFO: 49414 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,725 INFO: 49415 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,725 INFO: 49416 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,725 INFO: 49417 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,725 INFO: 49418 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,725 INFO: 49419 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,725 INFO: 49420 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,725 INFO: 49421 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,725 INFO: 49422 is random initialized by: <rand-0.013>
2024-12-09 08:51:21,726 INFO: 49423 is random initialized by: <rand-0.013>
2024-12-09 08:51:22,478 INFO: 49424 is random initialized by: vase, 20431
2024-12-09 08:51:22,478 INFO: 49425 is random initialized by: vase, 20431
2024-12-09 08:51:22,478 INFO: 49426 is random initialized by: vase, 20431
2024-12-09 08:51:22,479 INFO: 49427 is random initialized by: vase, 20431
2024-12-09 08:51:22,479 INFO: 49428 is random initialized by: vase, 20431
2024-12-09 08:51:22,479 INFO: 49429 is random initialized by: vase, 20431
2024-12-09 08:51:22,479 INFO: 49430 is random initialized by: vase, 20431
2024-12-09 08:51:22,480 INFO: 49431 is random initialized by: vase, 20431
2024-12-09 08:51:22,480 INFO: 49432 is random initialized by: vase, 20431
2024-12-09 08:51:22,480 INFO: 49433 is random initialized by: vase, 20431
2024-12-09 08:51:22,480 INFO: 49434 is random initialized by: vase, 20431
2024-12-09 08:51:22,480 INFO: 49435 is random initialized by: vase, 20431
2024-12-09 08:51:22,481 INFO: 49436 is random initialized by: vase, 20431
2024-12-09 08:51:22,481 INFO: 49437 is random initialized by: vase, 20431
2024-12-09 08:51:22,481 INFO: 49438 is random initialized by: vase, 20431
2024-12-09 08:51:22,481 INFO: 49439 is random initialized by: vase, 20431
2024-12-09 08:51:22,485 INFO: optimizing embedding using lr: 0.001
2024-12-09 08:51:22,500 INFO: optimizing text_encoder (48 LoRAs), using lr: 1e-05
2024-12-09 08:51:22,541 INFO: optimizing unet (128 LoRAs), using lr: 0.0001
2024-12-09 08:51:22,541 INFO: Network [EDLoRA] is created.
2024-12-09 08:51:24,326 INFO: Network: DistributedDataParallel - EDLoRA, with parameters: 1,067,351,979
2024-12-09 08:51:24,326 INFO: EDLoRA(
  (vae): AutoencoderKL(
    (encoder): Encoder(
      (conv_in): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (down_blocks): ModuleList(
        (0): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0-1): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (downsamplers): ModuleList(
            (0): Downsample2D(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
            )
          )
        )
        (1): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (downsamplers): ModuleList(
            (0): Downsample2D(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2))
            )
          )
        )
        (2): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (downsamplers): ModuleList(
            (0): Downsample2D(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2))
            )
          )
        )
        (3): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0-1): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
        )
      )
      (mid_block): UNetMidBlock2D(
        (attentions): ModuleList(
          (0): AttentionBlock(
            (group_norm): GroupNorm(32, 512, eps=1e-06, affine=True)
            (query): Linear(in_features=512, out_features=512, bias=True)
            (key): Linear(in_features=512, out_features=512, bias=True)
            (value): Linear(in_features=512, out_features=512, bias=True)
            (proj_attn): Linear(in_features=512, out_features=512, bias=True)
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
      )
      (conv_norm_out): GroupNorm(32, 512, eps=1e-06, affine=True)
      (conv_act): SiLU()
      (conv_out): Conv2d(512, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (decoder): Decoder(
      (conv_in): Conv2d(4, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (up_blocks): ModuleList(
        (0-1): 2 x UpDecoderBlock2D(
          (resnets): ModuleList(
            (0-2): 3 x ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (upsamplers): ModuleList(
            (0): Upsample2D(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
        )
        (2): UpDecoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1-2): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (upsamplers): ModuleList(
            (0): Upsample2D(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
        )
        (3): UpDecoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            )
            (1-2): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
        )
      )
      (mid_block): UNetMidBlock2D(
        (attentions): ModuleList(
          (0): AttentionBlock(
            (group_norm): GroupNorm(32, 512, eps=1e-06, affine=True)
            (query): Linear(in_features=512, out_features=512, bias=True)
            (key): Linear(in_features=512, out_features=512, bias=True)
            (value): Linear(in_features=512, out_features=512, bias=True)
            (proj_attn): Linear(in_features=512, out_features=512, bias=True)
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
      )
      (conv_norm_out): GroupNorm(32, 128, eps=1e-06, affine=True)
      (conv_act): SiLU()
      (conv_out): Conv2d(128, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (quant_conv): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
    (post_quant_conv): Conv2d(4, 4, kernel_size=(1, 1), stride=(1, 1))
  )
  (text_encoder): CLIPTextModel(
    (text_model): CLIPTextTransformer(
      (embeddings): CLIPTextEmbeddings(
        (token_embedding): Embedding(49440, 768)
        (position_embedding): Embedding(77, 768)
      )
      (encoder): CLIPEncoder(
        (layers): ModuleList(
          (0-11): 12 x CLIPEncoderLayer(
            (self_attn): CLIPSdpaAttention(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (layer_norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): CLIPMLP(
              (activation_fn): QuickGELUActivation()
              (fc1): Linear(in_features=768, out_features=3072, bias=True)
              (fc2): Linear(in_features=3072, out_features=768, bias=True)
            )
            (layer_norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (unet): UNet2DConditionModel(
    (conv_in): Conv2d(4, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (time_proj): Timesteps()
    (time_embedding): TimestepEmbedding(
      (linear_1): Linear(in_features=320, out_features=1280, bias=True)
      (act): SiLU()
      (linear_2): Linear(in_features=1280, out_features=1280, bias=True)
    )
    (down_blocks): ModuleList(
      (0): CrossAttnDownBlock2D(
        (attentions): ModuleList(
          (0-1): 2 x Transformer2DModel(
            (norm): GroupNorm(32, 320, eps=1e-06, affine=True)
            (proj_in): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=320, out_features=320, bias=False)
                  (to_v): Linear(in_features=320, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=320, out_features=2560, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=1280, out_features=320, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=768, out_features=320, bias=False)
                  (to_v): Linear(in_features=768, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 320, eps=1e-05, affine=True)
            (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=320, bias=True)
            (norm2): GroupNorm(32, 320, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
        (downsamplers): ModuleList(
          (0): Downsample2D(
            (conv): Conv2d(320, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
      )
      (1): CrossAttnDownBlock2D(
        (attentions): ModuleList(
          (0-1): 2 x Transformer2DModel(
            (norm): GroupNorm(32, 640, eps=1e-06, affine=True)
            (proj_in): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=640, out_features=640, bias=False)
                  (to_v): Linear(in_features=640, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=640, out_features=5120, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=2560, out_features=640, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=768, out_features=640, bias=False)
                  (to_v): Linear(in_features=768, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 320, eps=1e-05, affine=True)
            (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock2D(
            (norm1): GroupNorm(32, 640, eps=1e-05, affine=True)
            (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
        (downsamplers): ModuleList(
          (0): Downsample2D(
            (conv): Conv2d(640, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
      )
      (2): CrossAttnDownBlock2D(
        (attentions): ModuleList(
          (0-1): 2 x Transformer2DModel(
            (norm): GroupNorm(32, 1280, eps=1e-06, affine=True)
            (proj_in): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_v): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=1280, out_features=10240, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=5120, out_features=1280, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=768, out_features=1280, bias=False)
                  (to_v): Linear(in_features=768, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 640, eps=1e-05, affine=True)
            (conv1): Conv2d(640, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(640, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock2D(
            (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (conv1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
        (downsamplers): ModuleList(
          (0): Downsample2D(
            (conv): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
      )
      (3): DownBlock2D(
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (conv1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
      )
    )
    (up_blocks): ModuleList(
      (0): UpBlock2D(
        (resnets): ModuleList(
          (0-2): 3 x ResnetBlock2D(
            (norm1): GroupNorm(32, 2560, eps=1e-05, affine=True)
            (conv1): Conv2d(2560, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(2560, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (upsamplers): ModuleList(
          (0): Upsample2D(
            (conv): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (1): CrossAttnUpBlock2D(
        (attentions): ModuleList(
          (0-2): 3 x Transformer2DModel(
            (norm): GroupNorm(32, 1280, eps=1e-06, affine=True)
            (proj_in): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_v): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=1280, out_features=10240, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=5120, out_features=1280, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=768, out_features=1280, bias=False)
                  (to_v): Linear(in_features=768, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 2560, eps=1e-05, affine=True)
            (conv1): Conv2d(2560, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(2560, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): ResnetBlock2D(
            (norm1): GroupNorm(32, 1920, eps=1e-05, affine=True)
            (conv1): Conv2d(1920, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(1920, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (upsamplers): ModuleList(
          (0): Upsample2D(
            (conv): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (2): CrossAttnUpBlock2D(
        (attentions): ModuleList(
          (0-2): 3 x Transformer2DModel(
            (norm): GroupNorm(32, 640, eps=1e-06, affine=True)
            (proj_in): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=640, out_features=640, bias=False)
                  (to_v): Linear(in_features=640, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=640, out_features=5120, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=2560, out_features=640, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=768, out_features=640, bias=False)
                  (to_v): Linear(in_features=768, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 1920, eps=1e-05, affine=True)
            (conv1): Conv2d(1920, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(1920, 640, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock2D(
            (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (conv1): Conv2d(1280, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(1280, 640, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): ResnetBlock2D(
            (norm1): GroupNorm(32, 960, eps=1e-05, affine=True)
            (conv1): Conv2d(960, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(960, 640, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (upsamplers): ModuleList(
          (0): Upsample2D(
            (conv): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (3): CrossAttnUpBlock2D(
        (attentions): ModuleList(
          (0-2): 3 x Transformer2DModel(
            (norm): GroupNorm(32, 320, eps=1e-06, affine=True)
            (proj_in): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=320, out_features=320, bias=False)
                  (to_v): Linear(in_features=320, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=320, out_features=2560, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=1280, out_features=320, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=768, out_features=320, bias=False)
                  (to_v): Linear(in_features=768, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 960, eps=1e-05, affine=True)
            (conv1): Conv2d(960, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=320, bias=True)
            (norm2): GroupNorm(32, 320, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1))
          )
          (1-2): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 640, eps=1e-05, affine=True)
            (conv1): Conv2d(640, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=320, bias=True)
            (norm2): GroupNorm(32, 320, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(640, 320, kernel_size=(1, 1), stride=(1, 1))
          )
        )
      )
    )
    (mid_block): UNetMidBlock2DCrossAttn(
      (attentions): ModuleList(
        (0): Transformer2DModel(
          (norm): GroupNorm(32, 1280, eps=1e-06, affine=True)
          (proj_in): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
          (transformer_blocks): ModuleList(
            (0): BasicTransformerBlock(
              (attn1): CrossAttention(
                (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                (to_k): Linear(in_features=1280, out_features=1280, bias=False)
                (to_v): Linear(in_features=1280, out_features=1280, bias=False)
                (to_out): ModuleList(
                  (0): Linear(in_features=1280, out_features=1280, bias=True)
                  (1): Dropout(p=0.0, inplace=False)
                )
              )
              (ff): FeedForward(
                (net): ModuleList(
                  (0): GEGLU(
                    (proj): Linear(in_features=1280, out_features=10240, bias=True)
                  )
                  (1): Dropout(p=0.0, inplace=False)
                  (2): Linear(in_features=5120, out_features=1280, bias=True)
                )
              )
              (attn2): CrossAttention(
                (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                (to_k): Linear(in_features=768, out_features=1280, bias=False)
                (to_v): Linear(in_features=768, out_features=1280, bias=False)
                (to_out): ModuleList(
                  (0): Linear(in_features=1280, out_features=1280, bias=True)
                  (1): Dropout(p=0.0, inplace=False)
                )
              )
              (norm1): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              (norm3): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
            )
          )
          (proj_out): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (resnets): ModuleList(
        (0-1): 2 x ResnetBlock2D(
          (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
          (conv1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
          (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (nonlinearity): SiLU()
        )
      )
    )
    (conv_norm_out): GroupNorm(32, 320, eps=1e-05, affine=True)
    (conv_act): SiLU()
    (conv_out): Conv2d(320, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (text_encoder_lora): ModuleList(
    (0-47): 48 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=768, bias=False)
    )
  )
  (unet_lora): ModuleList(
    (0-4): 5 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (5-6): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (7-12): 6 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (13-14): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (15): LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (16-20): 5 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (21-22): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (23-28): 6 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (29-30): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (31): LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (32-36): 5 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (37-38): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (39-44): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (45-46): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (47-52): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (53-54): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (55-60): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (61-62): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (63-68): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (69-70): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (71): LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (72-76): 5 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (77-78): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (79-84): 6 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (85-86): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (87-92): 6 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (93-94): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (95): LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (96-100): 5 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (101-102): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (103-108): 6 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (109-110): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (111-116): 6 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (117-118): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (119): LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (120-124): 5 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (125-126): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (127): LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
  )
)
2024-12-09 08:51:24,347 INFO: Loss [KDELoss] is created.
2024-12-09 08:51:24,347 INFO: Scale learning rate to: 0.00e+00
2024-12-09 08:51:24,349 INFO: Model [EDLoraModel] is created.
2024-12-09 08:51:30,639 INFO: Use cuda prefetch dataloader
2024-12-09 08:51:30,639 INFO: Start training from epoch: 0, iter: 0
2024-12-09 08:51:54,864 INFO: [vase..][epoch:  0, iter:      10, lr:(9.910e-04,9.910e-06,9.910e-05,)] [eta: 0:16:43, time (data): 2.422 (0.648)] loss: -3.8593e-01 token_reg: -4.1070e-01 Norm_mean: 3.8501e-01 
2024-12-09 08:52:07,340 INFO: [vase..][epoch:  0, iter:      20, lr:(9.810e-04,9.810e-06,9.810e-05,)] [eta: 0:18:21, time (data): 1.835 (0.324)] loss: -3.6024e-01 token_reg: -4.1070e-01 Norm_mean: 3.9656e-01 
2024-12-09 08:52:19,818 INFO: [vase..][epoch:  0, iter:      30, lr:(9.710e-04,9.710e-06,9.710e-05,)] [eta: 0:18:48, time (data): 1.639 (0.216)] loss: -3.3111e-01 token_reg: -4.1070e-01 Norm_mean: 4.0665e-01 
2024-12-09 08:52:32,238 INFO: [vase..][epoch:  0, iter:      40, lr:(9.610e-04,9.610e-06,9.610e-05,)] [eta: 0:18:55, time (data): 1.540 (0.162)] loss: 2.9376e-01 token_reg: -4.1070e-01 Norm_mean: 4.1508e-01 
2024-12-09 08:52:44,626 INFO: [vase..][epoch:  0, iter:      50, lr:(9.510e-04,9.510e-06,9.510e-05,)] [eta: 0:18:53, time (data): 1.480 (0.130)] loss: -3.7780e-01 token_reg: -4.1070e-01 Norm_mean: 4.2296e-01 
2024-12-09 08:52:57,002 INFO: [vase..][epoch:  0, iter:      60, lr:(9.410e-04,9.410e-06,9.410e-05,)] [eta: 0:18:48, time (data): 1.439 (0.108)] loss: 1.7051e-01 token_reg: -4.1070e-01 Norm_mean: 4.3002e-01 
2024-12-09 08:53:09,381 INFO: [vase..][epoch:  0, iter:      70, lr:(9.310e-04,9.310e-06,9.310e-05,)] [eta: 0:18:41, time (data): 1.410 (0.093)] loss: -2.5433e-01 token_reg: -4.1070e-01 Norm_mean: 4.3572e-01 
2024-12-09 08:53:21,775 INFO: [vase..][epoch:  0, iter:      80, lr:(9.210e-04,9.210e-06,9.210e-05,)] [eta: 0:18:32, time (data): 1.389 (0.081)] loss: -3.8600e-01 token_reg: -4.1069e-01 Norm_mean: 4.4163e-01 
2024-12-09 08:53:34,173 INFO: [vase..][epoch:  0, iter:      90, lr:(9.110e-04,9.110e-06,9.110e-05,)] [eta: 0:18:23, time (data): 1.372 (0.072)] loss: -3.7937e-01 token_reg: -4.1069e-01 Norm_mean: 4.4839e-01 
2024-12-09 08:53:46,597 INFO: [vase..][epoch:  0, iter:     100, lr:(9.010e-04,9.010e-06,9.010e-05,)] [eta: 0:18:13, time (data): 1.359 (0.065)] loss: -2.1656e-01 token_reg: -4.1069e-01 Norm_mean: 4.5604e-01 
2024-12-09 08:53:59,006 INFO: [vase..][epoch:  0, iter:     110, lr:(8.910e-04,8.910e-06,8.910e-05,)] [eta: 0:18:03, time (data): 1.349 (0.059)] loss: -1.9369e-01 token_reg: -4.1069e-01 Norm_mean: 4.6411e-01 
2024-12-09 08:54:11,400 INFO: [vase..][epoch:  0, iter:     120, lr:(8.810e-04,8.810e-06,8.810e-05,)] [eta: 0:17:52, time (data): 1.340 (0.054)] loss: -2.4628e-01 token_reg: -4.1069e-01 Norm_mean: 4.7221e-01 
2024-12-09 08:54:23,796 INFO: [vase..][epoch:  0, iter:     130, lr:(8.710e-04,8.710e-06,8.710e-05,)] [eta: 0:17:41, time (data): 1.332 (0.050)] loss: -4.4208e-02 token_reg: -4.1069e-01 Norm_mean: 4.7963e-01 
2024-12-09 08:54:36,190 INFO: [vase..][epoch:  0, iter:     140, lr:(8.610e-04,8.610e-06,8.610e-05,)] [eta: 0:17:30, time (data): 1.325 (0.047)] loss: -4.0048e-01 token_reg: -4.1069e-01 Norm_mean: 4.8618e-01 
2024-12-09 08:54:48,587 INFO: [vase..][epoch:  0, iter:     150, lr:(8.510e-04,8.510e-06,8.510e-05,)] [eta: 0:17:19, time (data): 1.320 (0.044)] loss: -3.6768e-01 token_reg: -4.1069e-01 Norm_mean: 4.9150e-01 
2024-12-09 08:55:00,985 INFO: [vase..][epoch:  0, iter:     160, lr:(8.410e-04,8.410e-06,8.410e-05,)] [eta: 0:17:08, time (data): 1.315 (0.041)] loss: -3.9518e-01 token_reg: -4.1069e-01 Norm_mean: 4.9630e-01 
2024-12-09 08:55:13,382 INFO: [vase..][epoch:  0, iter:     170, lr:(8.310e-04,8.310e-06,8.310e-05,)] [eta: 0:16:56, time (data): 1.310 (0.039)] loss: -3.9235e-01 token_reg: -4.1069e-01 Norm_mean: 5.0190e-01 
2024-12-09 08:55:25,778 INFO: [vase..][epoch:  0, iter:     180, lr:(8.210e-04,8.210e-06,8.210e-05,)] [eta: 0:16:44, time (data): 1.306 (0.036)] loss: -3.4379e-01 token_reg: -4.1068e-01 Norm_mean: 5.0720e-01 
2024-12-09 08:55:38,192 INFO: [vase..][epoch:  0, iter:     190, lr:(8.110e-04,8.110e-06,8.110e-05,)] [eta: 0:16:33, time (data): 1.303 (0.035)] loss: -3.9976e-01 token_reg: -4.1068e-01 Norm_mean: 5.1188e-01 
2024-12-09 08:55:50,587 INFO: [vase..][epoch:  0, iter:     200, lr:(8.010e-04,8.010e-06,8.010e-05,)] [eta: 0:16:21, time (data): 1.300 (0.033)] loss: 1.1082e-01 token_reg: -4.1068e-01 Norm_mean: 5.1560e-01 
2024-12-09 08:55:50,588 INFO: Saving models and training states.
2024-12-09 08:55:50,605 INFO: text_encoder moved: 6.122967071557166e-05
2024-12-09 08:55:50,642 INFO: unet moved: 0.0006690728264402424
2024-12-09 08:56:03,700 INFO: [vase..][epoch:  0, iter:     210, lr:(7.910e-04,7.910e-06,7.910e-05,)] [eta: 0:16:12, time (data): 1.239 (0.000)] loss: -2.0595e-02 token_reg: -4.1068e-01 Norm_mean: 5.1897e-01 
2024-12-09 08:56:16,099 INFO: [vase..][epoch:  0, iter:     220, lr:(7.810e-04,7.810e-06,7.810e-05,)] [eta: 0:16:00, time (data): 1.240 (0.000)] loss: 3.3864e-01 token_reg: -4.1068e-01 Norm_mean: 5.2261e-01 
2024-12-09 08:56:28,518 INFO: [vase..][epoch:  0, iter:     230, lr:(7.710e-04,7.710e-06,7.710e-05,)] [eta: 0:15:48, time (data): 1.240 (0.001)] loss: -1.0932e-01 token_reg: -4.1068e-01 Norm_mean: 5.2689e-01 
2024-12-09 08:56:40,909 INFO: [vase..][epoch:  0, iter:     240, lr:(7.610e-04,7.610e-06,7.610e-05,)] [eta: 0:15:36, time (data): 1.240 (0.000)] loss: 5.7986e-01 token_reg: -4.1068e-01 Norm_mean: 5.3121e-01 
2024-12-09 08:56:53,310 INFO: [vase..][epoch:  0, iter:     250, lr:(7.510e-04,7.510e-06,7.510e-05,)] [eta: 0:15:23, time (data): 1.240 (0.000)] loss: 4.6557e-01 token_reg: -4.1068e-01 Norm_mean: 5.3445e-01 
2024-12-09 08:57:05,704 INFO: [vase..][epoch:  0, iter:     260, lr:(7.410e-04,7.410e-06,7.410e-05,)] [eta: 0:15:11, time (data): 1.240 (0.000)] loss: -1.2337e-02 token_reg: -4.1068e-01 Norm_mean: 5.3747e-01 
2024-12-09 08:57:18,100 INFO: [vase..][epoch:  0, iter:     270, lr:(7.310e-04,7.310e-06,7.310e-05,)] [eta: 0:14:59, time (data): 1.240 (0.000)] loss: 1.5905e-01 token_reg: -4.1068e-01 Norm_mean: 5.4079e-01 
2024-12-09 08:57:30,497 INFO: [vase..][epoch:  0, iter:     280, lr:(7.210e-04,7.210e-06,7.210e-05,)] [eta: 0:14:47, time (data): 1.240 (0.000)] loss: -2.9632e-01 token_reg: -4.1068e-01 Norm_mean: 5.4459e-01 
2024-12-09 08:57:42,894 INFO: [vase..][epoch:  0, iter:     290, lr:(7.110e-04,7.110e-06,7.110e-05,)] [eta: 0:14:35, time (data): 1.240 (0.000)] loss: -1.0309e-01 token_reg: -4.1068e-01 Norm_mean: 5.4799e-01 
2024-12-09 08:57:55,289 INFO: [vase..][epoch:  0, iter:     300, lr:(7.010e-04,7.010e-06,7.010e-05,)] [eta: 0:14:22, time (data): 1.240 (0.000)] loss: -1.2556e-02 token_reg: -4.1068e-01 Norm_mean: 5.5091e-01 
2024-12-09 08:58:07,684 INFO: [vase..][epoch:  0, iter:     310, lr:(6.910e-04,6.910e-06,6.910e-05,)] [eta: 0:14:10, time (data): 1.240 (0.000)] loss: -3.6933e-01 token_reg: -4.1068e-01 Norm_mean: 5.5424e-01 
2024-12-09 08:58:20,081 INFO: [vase..][epoch:  0, iter:     320, lr:(6.810e-04,6.810e-06,6.810e-05,)] [eta: 0:13:58, time (data): 1.240 (0.000)] loss: -3.0508e-01 token_reg: -4.1068e-01 Norm_mean: 5.5773e-01 
2024-12-09 08:58:32,476 INFO: [vase..][epoch:  0, iter:     330, lr:(6.710e-04,6.710e-06,6.710e-05,)] [eta: 0:13:46, time (data): 1.240 (0.000)] loss: -3.9442e-01 token_reg: -4.1067e-01 Norm_mean: 5.6036e-01 
2024-12-09 08:58:44,873 INFO: [vase..][epoch:  0, iter:     340, lr:(6.610e-04,6.610e-06,6.610e-05,)] [eta: 0:13:33, time (data): 1.240 (0.000)] loss: 4.9434e-01 token_reg: -4.1067e-01 Norm_mean: 5.6192e-01 
2024-12-09 08:58:57,269 INFO: [vase..][epoch:  0, iter:     350, lr:(6.510e-04,6.510e-06,6.510e-05,)] [eta: 0:13:21, time (data): 1.240 (0.000)] loss: 1.1493e-01 token_reg: -4.1067e-01 Norm_mean: 5.6335e-01 
2024-12-09 08:59:09,665 INFO: [vase..][epoch:  0, iter:     360, lr:(6.410e-04,6.410e-06,6.410e-05,)] [eta: 0:13:09, time (data): 1.240 (0.000)] loss: -2.4620e-01 token_reg: -4.1067e-01 Norm_mean: 5.6501e-01 
2024-12-09 08:59:22,062 INFO: [vase..][epoch:  0, iter:     370, lr:(6.310e-04,6.310e-06,6.310e-05,)] [eta: 0:12:57, time (data): 1.240 (0.000)] loss: -3.8507e-01 token_reg: -4.1067e-01 Norm_mean: 5.6652e-01 
2024-12-09 08:59:34,457 INFO: [vase..][epoch:  0, iter:     380, lr:(6.210e-04,6.210e-06,6.210e-05,)] [eta: 0:12:44, time (data): 1.240 (0.000)] loss: -3.7887e-01 token_reg: -4.1067e-01 Norm_mean: 5.6829e-01 
2024-12-09 08:59:46,853 INFO: [vase..][epoch:  0, iter:     390, lr:(6.110e-04,6.110e-06,6.110e-05,)] [eta: 0:12:32, time (data): 1.240 (0.000)] loss: 3.6606e-01 token_reg: -4.1067e-01 Norm_mean: 5.7020e-01 
2024-12-09 08:59:59,247 INFO: [vase..][epoch:  0, iter:     400, lr:(6.010e-04,6.010e-06,6.010e-05,)] [eta: 0:12:20, time (data): 1.240 (0.000)] loss: -3.9017e-01 token_reg: -4.1067e-01 Norm_mean: 5.7260e-01 
2024-12-09 08:59:59,249 INFO: Saving models and training states.
2024-12-09 08:59:59,261 INFO: text_encoder moved: 7.911186351824047e-05
2024-12-09 08:59:59,294 INFO: unet moved: 0.0009102988838094461
2024-12-09 09:00:12,334 INFO: [vase..][epoch:  0, iter:     410, lr:(5.910e-04,5.910e-06,5.910e-05,)] [eta: 0:12:08, time (data): 1.239 (0.000)] loss: -3.8366e-01 token_reg: -4.1067e-01 Norm_mean: 5.7512e-01 
2024-12-09 09:00:24,737 INFO: [vase..][epoch:  0, iter:     420, lr:(5.810e-04,5.810e-06,5.810e-05,)] [eta: 0:11:56, time (data): 1.240 (0.000)] loss: 1.7863e-01 token_reg: -4.1067e-01 Norm_mean: 5.7691e-01 
2024-12-09 09:00:37,136 INFO: [vase..][epoch:  0, iter:     430, lr:(5.710e-04,5.710e-06,5.710e-05,)] [eta: 0:11:44, time (data): 1.240 (0.000)] loss: -3.7663e-01 token_reg: -4.1067e-01 Norm_mean: 5.7860e-01 
2024-12-09 09:00:49,532 INFO: [vase..][epoch:  0, iter:     440, lr:(5.610e-04,5.610e-06,5.610e-05,)] [eta: 0:11:31, time (data): 1.240 (0.000)] loss: -3.8718e-01 token_reg: -4.1067e-01 Norm_mean: 5.8094e-01 
2024-12-09 09:01:01,930 INFO: [vase..][epoch:  0, iter:     450, lr:(5.510e-04,5.510e-06,5.510e-05,)] [eta: 0:11:19, time (data): 1.240 (0.000)] loss: -3.8251e-01 token_reg: -4.1067e-01 Norm_mean: 5.8282e-01 
2024-12-09 09:01:14,326 INFO: [vase..][epoch:  0, iter:     460, lr:(5.410e-04,5.410e-06,5.410e-05,)] [eta: 0:11:07, time (data): 1.240 (0.000)] loss: -3.4052e-01 token_reg: -4.1067e-01 Norm_mean: 5.8427e-01 
2024-12-09 09:01:26,720 INFO: [vase..][epoch:  0, iter:     470, lr:(5.310e-04,5.310e-06,5.310e-05,)] [eta: 0:10:54, time (data): 1.240 (0.000)] loss: -2.4409e-01 token_reg: -4.1067e-01 Norm_mean: 5.8577e-01 
2024-12-09 09:01:39,117 INFO: [vase..][epoch:  0, iter:     480, lr:(5.210e-04,5.210e-06,5.210e-05,)] [eta: 0:10:42, time (data): 1.240 (0.000)] loss: -3.6477e-01 token_reg: -4.1067e-01 Norm_mean: 5.8746e-01 
2024-12-09 09:01:51,525 INFO: [vase..][epoch:  0, iter:     490, lr:(5.110e-04,5.110e-06,5.110e-05,)] [eta: 0:10:30, time (data): 1.240 (0.000)] loss: -2.4088e-01 token_reg: -4.1067e-01 Norm_mean: 5.8895e-01 
2024-12-09 09:02:03,929 INFO: [vase..][epoch:  0, iter:     500, lr:(5.010e-04,5.010e-06,5.010e-05,)] [eta: 0:10:17, time (data): 1.240 (0.000)] loss: 1.8963e-01 token_reg: -4.1067e-01 Norm_mean: 5.9020e-01 
2024-12-09 09:02:16,324 INFO: [vase..][epoch:  0, iter:     510, lr:(4.910e-04,4.910e-06,4.910e-05,)] [eta: 0:10:05, time (data): 1.240 (0.000)] loss: 1.9032e-01 token_reg: -4.1067e-01 Norm_mean: 5.9120e-01 
2024-12-09 09:02:28,720 INFO: [vase..][epoch:  0, iter:     520, lr:(4.810e-04,4.810e-06,4.810e-05,)] [eta: 0:09:53, time (data): 1.240 (0.000)] loss: 8.5905e-01 token_reg: -4.1067e-01 Norm_mean: 5.9231e-01 
2024-12-09 09:02:41,115 INFO: [vase..][epoch:  0, iter:     530, lr:(4.710e-04,4.710e-06,4.710e-05,)] [eta: 0:09:40, time (data): 1.240 (0.000)] loss: -1.6210e-01 token_reg: -4.1067e-01 Norm_mean: 5.9351e-01 
2024-12-09 09:02:53,513 INFO: [vase..][epoch:  0, iter:     540, lr:(4.610e-04,4.610e-06,4.610e-05,)] [eta: 0:09:28, time (data): 1.240 (0.000)] loss: 1.0279e-01 token_reg: -4.1067e-01 Norm_mean: 5.9463e-01 
2024-12-09 09:03:05,909 INFO: [vase..][epoch:  0, iter:     550, lr:(4.510e-04,4.510e-06,4.510e-05,)] [eta: 0:09:15, time (data): 1.240 (0.000)] loss: 9.0810e-02 token_reg: -4.1067e-01 Norm_mean: 5.9564e-01 
2024-12-09 09:03:18,304 INFO: [vase..][epoch:  0, iter:     560, lr:(4.410e-04,4.410e-06,4.410e-05,)] [eta: 0:09:03, time (data): 1.240 (0.000)] loss: 3.6616e-01 token_reg: -4.1067e-01 Norm_mean: 5.9660e-01 
2024-12-09 09:03:30,701 INFO: [vase..][epoch:  0, iter:     570, lr:(4.310e-04,4.310e-06,4.310e-05,)] [eta: 0:08:51, time (data): 1.240 (0.000)] loss: -3.8184e-01 token_reg: -4.1067e-01 Norm_mean: 5.9766e-01 
2024-12-09 09:03:43,098 INFO: [vase..][epoch:  0, iter:     580, lr:(4.210e-04,4.210e-06,4.210e-05,)] [eta: 0:08:38, time (data): 1.240 (0.000)] loss: -2.8147e-01 token_reg: -4.1067e-01 Norm_mean: 5.9849e-01 
2024-12-09 09:03:55,492 INFO: [vase..][epoch:  0, iter:     590, lr:(4.110e-04,4.110e-06,4.110e-05,)] [eta: 0:08:26, time (data): 1.240 (0.000)] loss: 1.4671e-01 token_reg: -4.1067e-01 Norm_mean: 5.9926e-01 
2024-12-09 09:04:09,176 INFO: [vase..][epoch:  0, iter:     600, lr:(4.010e-04,4.010e-06,4.010e-05,)] [eta: 0:08:14, time (data): 1.246 (0.007)] loss: 3.3787e-01 token_reg: -4.1067e-01 Norm_mean: 5.9990e-01 
2024-12-09 09:04:09,177 INFO: Saving models and training states.
2024-12-09 09:04:09,194 INFO: text_encoder moved: 9.05332467482367e-05
2024-12-09 09:04:09,229 INFO: unet moved: 0.0010677124314497632
2024-12-09 09:04:28,583 INFO: [vase..][epoch:  1, iter:     610, lr:(3.910e-04,3.910e-06,3.910e-05,)] [eta: 0:08:06, time (data): 1.237 (0.000)] loss: -3.9160e-01 token_reg: -4.1067e-01 Norm_mean: 6.0061e-01 
2024-12-09 09:04:41,146 INFO: [vase..][epoch:  1, iter:     620, lr:(3.810e-04,3.810e-06,3.810e-05,)] [eta: 0:07:54, time (data): 1.248 (0.000)] loss: 9.9671e-02 token_reg: -4.1067e-01 Norm_mean: 6.0121e-01 
2024-12-09 09:04:53,620 INFO: [vase..][epoch:  1, iter:     630, lr:(3.710e-04,3.710e-06,3.710e-05,)] [eta: 0:07:41, time (data): 1.248 (0.000)] loss: -1.6869e-01 token_reg: -4.1067e-01 Norm_mean: 6.0192e-01 
2024-12-09 09:05:06,061 INFO: [vase..][epoch:  1, iter:     640, lr:(3.610e-04,3.610e-06,3.610e-05,)] [eta: 0:07:29, time (data): 1.247 (0.000)] loss: 9.7742e-02 token_reg: -4.1067e-01 Norm_mean: 6.0284e-01 
2024-12-09 09:05:18,468 INFO: [vase..][epoch:  1, iter:     650, lr:(3.510e-04,3.510e-06,3.510e-05,)] [eta: 0:07:16, time (data): 1.246 (0.000)] loss: 1.3946e+00 token_reg: -4.1067e-01 Norm_mean: 6.0375e-01 
2024-12-09 09:05:30,859 INFO: [vase..][epoch:  1, iter:     660, lr:(3.410e-04,3.410e-06,3.410e-05,)] [eta: 0:07:04, time (data): 1.244 (0.000)] loss: -3.0100e-01 token_reg: -4.1067e-01 Norm_mean: 6.0447e-01 
2024-12-09 09:05:43,255 INFO: [vase..][epoch:  1, iter:     670, lr:(3.310e-04,3.310e-06,3.310e-05,)] [eta: 0:06:51, time (data): 1.244 (0.000)] loss: -3.9978e-01 token_reg: -4.1067e-01 Norm_mean: 6.0508e-01 
2024-12-09 09:05:55,655 INFO: [vase..][epoch:  1, iter:     680, lr:(3.210e-04,3.210e-06,3.210e-05,)] [eta: 0:06:39, time (data): 1.243 (0.000)] loss: 2.8244e-01 token_reg: -4.1067e-01 Norm_mean: 6.0557e-01 
2024-12-09 09:06:08,050 INFO: [vase..][epoch:  1, iter:     690, lr:(3.110e-04,3.110e-06,3.110e-05,)] [eta: 0:06:26, time (data): 1.243 (0.000)] loss: -2.3082e-01 token_reg: -4.1067e-01 Norm_mean: 6.0616e-01 
2024-12-09 09:06:20,464 INFO: [vase..][epoch:  1, iter:     700, lr:(3.010e-04,3.010e-06,3.010e-05,)] [eta: 0:06:13, time (data): 1.243 (0.000)] loss: -3.3775e-01 token_reg: -4.1067e-01 Norm_mean: 6.0675e-01 
2024-12-09 09:06:32,862 INFO: [vase..][epoch:  1, iter:     710, lr:(2.910e-04,2.910e-06,2.910e-05,)] [eta: 0:06:01, time (data): 1.242 (0.000)] loss: -2.4757e-01 token_reg: -4.1067e-01 Norm_mean: 6.0725e-01 
2024-12-09 09:06:45,260 INFO: [vase..][epoch:  1, iter:     720, lr:(2.810e-04,2.810e-06,2.810e-05,)] [eta: 0:05:48, time (data): 1.242 (0.000)] loss: -2.0632e-01 token_reg: -4.1067e-01 Norm_mean: 6.0770e-01 
2024-12-09 09:06:57,653 INFO: [vase..][epoch:  1, iter:     730, lr:(2.710e-04,2.710e-06,2.710e-05,)] [eta: 0:05:36, time (data): 1.242 (0.000)] loss: -3.8148e-01 token_reg: -4.1067e-01 Norm_mean: 6.0810e-01 
2024-12-09 09:07:10,047 INFO: [vase..][epoch:  1, iter:     740, lr:(2.610e-04,2.610e-06,2.610e-05,)] [eta: 0:05:23, time (data): 1.242 (0.000)] loss: -3.8512e-01 token_reg: -4.1067e-01 Norm_mean: 6.0859e-01 
2024-12-09 09:07:22,444 INFO: [vase..][epoch:  1, iter:     750, lr:(2.510e-04,2.510e-06,2.510e-05,)] [eta: 0:05:11, time (data): 1.242 (0.000)] loss: -3.6128e-01 token_reg: -4.1067e-01 Norm_mean: 6.0898e-01 
2024-12-09 09:07:34,841 INFO: [vase..][epoch:  1, iter:     760, lr:(2.410e-04,2.410e-06,2.410e-05,)] [eta: 0:04:58, time (data): 1.241 (0.000)] loss: 1.3085e+00 token_reg: -4.1067e-01 Norm_mean: 6.0927e-01 
2024-12-09 09:07:47,238 INFO: [vase..][epoch:  1, iter:     770, lr:(2.310e-04,2.310e-06,2.310e-05,)] [eta: 0:04:46, time (data): 1.241 (0.000)] loss: -3.4909e-01 token_reg: -4.1066e-01 Norm_mean: 6.0958e-01 
2024-12-09 09:07:59,634 INFO: [vase..][epoch:  1, iter:     780, lr:(2.210e-04,2.210e-06,2.210e-05,)] [eta: 0:04:33, time (data): 1.241 (0.000)] loss: -3.9806e-01 token_reg: -4.1066e-01 Norm_mean: 6.0985e-01 
2024-12-09 09:08:12,027 INFO: [vase..][epoch:  1, iter:     790, lr:(2.110e-04,2.110e-06,2.110e-05,)] [eta: 0:04:21, time (data): 1.241 (0.000)] loss: -3.1851e-01 token_reg: -4.1066e-01 Norm_mean: 6.1003e-01 
2024-12-09 09:08:24,425 INFO: [vase..][epoch:  1, iter:     800, lr:(2.010e-04,2.010e-06,2.010e-05,)] [eta: 0:04:08, time (data): 1.241 (0.000)] loss: -1.7562e-01 token_reg: -4.1066e-01 Norm_mean: 6.1010e-01 
2024-12-09 09:08:24,426 INFO: Saving models and training states.
2024-12-09 09:08:24,440 INFO: text_encoder moved: 9.684633566090876e-05
2024-12-09 09:08:24,482 INFO: unet moved: 0.0011394626253604656
2024-12-09 09:08:37,540 INFO: [vase..][epoch:  1, iter:     810, lr:(1.910e-04,1.910e-06,1.910e-05,)] [eta: 0:03:56, time (data): 1.242 (0.000)] loss: 5.2560e-02 token_reg: -4.1066e-01 Norm_mean: 6.1021e-01 
2024-12-09 09:08:49,938 INFO: [vase..][epoch:  1, iter:     820, lr:(1.810e-04,1.810e-06,1.810e-05,)] [eta: 0:03:43, time (data): 1.240 (0.000)] loss: -4.0424e-01 token_reg: -4.1066e-01 Norm_mean: 6.1048e-01 
2024-12-09 09:09:02,335 INFO: [vase..][epoch:  1, iter:     830, lr:(1.710e-04,1.710e-06,1.710e-05,)] [eta: 0:03:31, time (data): 1.240 (0.000)] loss: 2.2436e-02 token_reg: -4.1066e-01 Norm_mean: 6.1064e-01 
2024-12-09 09:09:14,729 INFO: [vase..][epoch:  1, iter:     840, lr:(1.610e-04,1.610e-06,1.610e-05,)] [eta: 0:03:18, time (data): 1.240 (0.000)] loss: -3.0599e-01 token_reg: -4.1066e-01 Norm_mean: 6.1071e-01 
2024-12-09 09:09:27,125 INFO: [vase..][epoch:  1, iter:     850, lr:(1.510e-04,1.510e-06,1.510e-05,)] [eta: 0:03:06, time (data): 1.240 (0.000)] loss: 1.7794e+00 token_reg: -4.1066e-01 Norm_mean: 6.1077e-01 
2024-12-09 09:09:39,523 INFO: [vase..][epoch:  1, iter:     860, lr:(1.410e-04,1.410e-06,1.410e-05,)] [eta: 0:02:53, time (data): 1.240 (0.000)] loss: -3.1152e-01 token_reg: -4.1066e-01 Norm_mean: 6.1093e-01 
2024-12-09 09:09:51,918 INFO: [vase..][epoch:  1, iter:     870, lr:(1.310e-04,1.310e-06,1.310e-05,)] [eta: 0:02:41, time (data): 1.240 (0.000)] loss: -3.3886e-01 token_reg: -4.1066e-01 Norm_mean: 6.1108e-01 
2024-12-09 09:10:04,334 INFO: [vase..][epoch:  1, iter:     880, lr:(1.210e-04,1.210e-06,1.210e-05,)] [eta: 0:02:28, time (data): 1.240 (0.000)] loss: -1.3269e-01 token_reg: -4.1066e-01 Norm_mean: 6.1121e-01 
2024-12-09 09:10:16,730 INFO: [vase..][epoch:  1, iter:     890, lr:(1.110e-04,1.110e-06,1.110e-05,)] [eta: 0:02:16, time (data): 1.240 (0.000)] loss: 1.1329e+00 token_reg: -4.1066e-01 Norm_mean: 6.1131e-01 
2024-12-09 09:10:29,127 INFO: [vase..][epoch:  1, iter:     900, lr:(1.010e-04,1.010e-06,1.010e-05,)] [eta: 0:02:03, time (data): 1.240 (0.000)] loss: 8.8237e-01 token_reg: -4.1066e-01 Norm_mean: 6.1138e-01 
2024-12-09 09:10:41,522 INFO: [vase..][epoch:  1, iter:     910, lr:(9.100e-05,9.100e-07,9.100e-06,)] [eta: 0:01:51, time (data): 1.240 (0.000)] loss: -8.3480e-02 token_reg: -4.1066e-01 Norm_mean: 6.1142e-01 
2024-12-09 09:10:53,917 INFO: [vase..][epoch:  1, iter:     920, lr:(8.100e-05,8.100e-07,8.100e-06,)] [eta: 0:01:38, time (data): 1.240 (0.000)] loss: -2.6329e-01 token_reg: -4.1066e-01 Norm_mean: 6.1144e-01 
2024-12-09 09:11:06,316 INFO: [vase..][epoch:  1, iter:     930, lr:(7.100e-05,7.100e-07,7.100e-06,)] [eta: 0:01:26, time (data): 1.240 (0.000)] loss: 4.5340e-01 token_reg: -4.1066e-01 Norm_mean: 6.1144e-01 
2024-12-09 09:11:18,710 INFO: [vase..][epoch:  1, iter:     940, lr:(6.100e-05,6.100e-07,6.100e-06,)] [eta: 0:01:13, time (data): 1.240 (0.000)] loss: -2.3927e-01 token_reg: -4.1066e-01 Norm_mean: 6.1145e-01 
2024-12-09 09:11:31,108 INFO: [vase..][epoch:  1, iter:     950, lr:(5.100e-05,5.100e-07,5.100e-06,)] [eta: 0:01:01, time (data): 1.240 (0.000)] loss: -3.2411e-01 token_reg: -4.1066e-01 Norm_mean: 6.1145e-01 
2024-12-09 09:11:43,501 INFO: [vase..][epoch:  1, iter:     960, lr:(4.100e-05,4.100e-07,4.100e-06,)] [eta: 0:00:48, time (data): 1.240 (0.000)] loss: -4.0441e-01 token_reg: -4.1066e-01 Norm_mean: 6.1143e-01 
2024-12-09 09:11:55,897 INFO: [vase..][epoch:  1, iter:     970, lr:(3.100e-05,3.100e-07,3.100e-06,)] [eta: 0:00:36, time (data): 1.240 (0.000)] loss: 6.2364e-02 token_reg: -4.1066e-01 Norm_mean: 6.1142e-01 
2024-12-09 09:12:08,295 INFO: [vase..][epoch:  1, iter:     980, lr:(2.100e-05,2.100e-07,2.100e-06,)] [eta: 0:00:23, time (data): 1.240 (0.000)] loss: 1.0324e+00 token_reg: -4.1066e-01 Norm_mean: 6.1141e-01 
2024-12-09 09:12:20,691 INFO: [vase..][epoch:  1, iter:     990, lr:(1.100e-05,1.100e-07,1.100e-06,)] [eta: 0:00:11, time (data): 1.240 (0.000)] loss: -3.3182e-01 token_reg: -4.1066e-01 Norm_mean: 6.1141e-01 
2024-12-09 09:12:33,089 INFO: [vase..][epoch:  1, iter:   1,000, lr:(1.000e-06,1.000e-08,1.000e-07,)] [eta: -1 day, 23:59:59, time (data): 1.240 (0.000)] loss: -2.7177e-01 token_reg: -4.1066e-01 Norm_mean: 6.1140e-01 
2024-12-09 09:12:33,090 INFO: Saving models and training states.
2024-12-09 09:12:33,107 INFO: text_encoder moved: 9.870275046826767e-05
2024-12-09 09:12:33,156 INFO: unet moved: 0.0011659955785034981
2024-12-09 09:13:18,901 INFO: End of training. Time consumed: 0:21:48
2024-12-09 09:13:18,901 INFO: Save the latest model.
2024-12-09 09:13:18,914 INFO: text_encoder moved: 9.870275046826767e-05
2024-12-09 09:13:18,966 INFO: unet moved: 0.0011659955785034981
