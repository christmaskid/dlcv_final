2024-12-09 08:28:32,240 INFO: 
Version Information: 
OpenStory
	PyTorch: 2.3.1+cu121
	TorchVision: 0.18.1+cu121
2024-12-09 08:28:32,241 INFO: 
  name: flower_1
  model_type: EDLoraModel
  world_size: 1
  num_gpu: 1
  manual_seed: 0
  datasets:[
    train:[
      name: LoraDataset
      type: LoraDataset
      concept_list: /content/Data/jsons/flower_1.json
      use_caption: True
      instance_transform: [OrderedDict([('type', 'Resize'), ('size', 512)]), OrderedDict([('type', 'HumanResizeCropFinal'), ('size', 512), ('crop_p', 0.5)]), OrderedDict([('type', 'ToTensor')]), OrderedDict([('type', 'Normalize'), ('mean', [0.5]), ('std', [0.5])]), OrderedDict([('type', 'ShuffleCaption'), ('keep_token_num', 1)]), OrderedDict([('type', 'EnhanceText'), ('enhance_type', 'human')])]
      replace_mapping:[
        <TOK>: <flower_1_1> <flower_1_2>
      ]
      dataset_enlarge_ratio: 100
      use_shuffle: True
      num_worker_per_gpu: 2
      batch_size_per_gpu: 1
      pin_memory: True
      prefetch_mode: cuda
      phase: train
    ]
    val_vis:[
      name: PromptDataset
      type: PromptDataset
      prompts: /content/dlcv_final/Mix-of-Show/datasets/validation_prompts/val.txt
      num_samples_per_prompt: 1
      latent_size: [4, 64, 64]
      replace_mapping:[
        <TOK>: <flower_1_1> <flower_1_2>
      ]
      use_shuffle: False
      num_worker_per_gpu: 2
      batch_size_per_gpu: 1
      phase: val
    ]
  ]
  network_g:[
    type: EDLoRA
    pretrained_path: experiments/pretrained_models/stable-diffusion-v1-4
    finetune_cfg:[
      text_embedding:[
        enable_tuning: True
        lr: 0.001
      ]
      text_encoder:[
        enable_tuning: True
        lora_cfg:[
          rank: 4
          alpha: 1
          where: CLIPSdpaAttention
        ]
        lr: 1e-05
      ]
      unet:[
        enable_tuning: True
        lora_cfg:[
          rank: 4
          alpha: 1
          where: CrossAttention
        ]
        lr: 0.0001
      ]
    ]
    new_concept_token: <flower_1_1>+<flower_1_2>
    noise_offset: 0.01
    initializer_token: <rand-0.013>+flower
    sd_version: v1
    test_sampler_type: ddim
  ]
  path:[
    pretrain_network_g: None
    experiments_root: /content/dlcv_final/Mix-of-Show/experiments/flower_1
    models: /content/dlcv_final/Mix-of-Show/experiments/flower_1/models
    training_states: /content/dlcv_final/Mix-of-Show/experiments/flower_1/training_states
    log: /content/dlcv_final/Mix-of-Show/experiments/flower_1
    visualization: /content/dlcv_final/Mix-of-Show/experiments/flower_1/visualization
  ]
  train:[
    optim_g:[
      type: AdamW
      lr: 0.0
      scale_lr: False
      weight_decay: 0.01
      betas: [0.9, 0.999]
    ]
    kde_opt:[
      type: KDELoss
      loss_weight: 0.002
      bandwidth: 0.5
    ]
    drop_start_iter: -1
    unet_kv_drop_rate: 0.0
    scheduler:[
      type: LinearLR
      num_epochs: 1000
    ]
    total_iter: 1000
    warmup_iter: -1
  ]
  val:[
    val_freq: 1000.0
    save_img: True
    compose_visualize: True
    pbar: True
    suffix: None
    sample:[
      num_inference_steps: 50
      guidance_scale: 7.5
    ]
    metrics: None
  ]
  logger:[
    print_freq: 10
    save_checkpoint_freq: 200.0
    use_tb_logger: False
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: True
  rank: 0
  auto_resume: False
  is_train: True
  root_path: /content/dlcv_final/Mix-of-Show

2024-12-09 08:28:32,242 INFO: Transform [Resize] is created.
2024-12-09 08:28:32,242 INFO: Transform [HumanResizeCropFinal] is created.
2024-12-09 08:28:32,242 INFO: Transform [ToTensor] is created.
2024-12-09 08:28:32,242 INFO: Transform [Normalize] is created.
2024-12-09 08:28:32,242 INFO: Transform [ShuffleCaption] is created.
2024-12-09 08:28:32,242 INFO: Transform [EnhanceText] is created.
2024-12-09 08:28:32,242 INFO: Dataset [LoraDataset] - LoraDataset is built.
2024-12-09 08:28:32,243 INFO: Training statistics:
	Number of train images: 8
	Dataset enlarge ratio: 100
	Batch size per gpu: 1
	World size (gpu number): 1
	Require iter number per epoch: 800
	Total epochs: 2; iters: 1000.
2024-12-09 08:28:32,243 INFO: Dataset [PromptDataset] - PromptDataset is built.
2024-12-09 08:28:32,243 INFO: Number of val images/folders in PromptDataset: 1
2024-12-09 08:28:33,518 INFO: 49408 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,519 INFO: 49409 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,519 INFO: 49410 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,519 INFO: 49411 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,519 INFO: 49412 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,519 INFO: 49413 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,519 INFO: 49414 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,519 INFO: 49415 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,519 INFO: 49416 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,520 INFO: 49417 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,520 INFO: 49418 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,520 INFO: 49419 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,520 INFO: 49420 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,520 INFO: 49421 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,520 INFO: 49422 is random initialized by: <rand-0.013>
2024-12-09 08:28:33,520 INFO: 49423 is random initialized by: <rand-0.013>
2024-12-09 08:28:34,202 INFO: 49424 is random initialized by: flower, 4055
2024-12-09 08:28:34,203 INFO: 49425 is random initialized by: flower, 4055
2024-12-09 08:28:34,203 INFO: 49426 is random initialized by: flower, 4055
2024-12-09 08:28:34,203 INFO: 49427 is random initialized by: flower, 4055
2024-12-09 08:28:34,203 INFO: 49428 is random initialized by: flower, 4055
2024-12-09 08:28:34,204 INFO: 49429 is random initialized by: flower, 4055
2024-12-09 08:28:34,204 INFO: 49430 is random initialized by: flower, 4055
2024-12-09 08:28:34,204 INFO: 49431 is random initialized by: flower, 4055
2024-12-09 08:28:34,204 INFO: 49432 is random initialized by: flower, 4055
2024-12-09 08:28:34,205 INFO: 49433 is random initialized by: flower, 4055
2024-12-09 08:28:34,205 INFO: 49434 is random initialized by: flower, 4055
2024-12-09 08:28:34,205 INFO: 49435 is random initialized by: flower, 4055
2024-12-09 08:28:34,205 INFO: 49436 is random initialized by: flower, 4055
2024-12-09 08:28:34,205 INFO: 49437 is random initialized by: flower, 4055
2024-12-09 08:28:34,206 INFO: 49438 is random initialized by: flower, 4055
2024-12-09 08:28:34,206 INFO: 49439 is random initialized by: flower, 4055
2024-12-09 08:28:34,209 INFO: optimizing embedding using lr: 0.001
2024-12-09 08:28:34,224 INFO: optimizing text_encoder (48 LoRAs), using lr: 1e-05
2024-12-09 08:28:34,264 INFO: optimizing unet (128 LoRAs), using lr: 0.0001
2024-12-09 08:28:34,264 INFO: Network [EDLoRA] is created.
2024-12-09 08:28:36,020 INFO: Network: DistributedDataParallel - EDLoRA, with parameters: 1,067,351,979
2024-12-09 08:28:36,021 INFO: EDLoRA(
  (vae): AutoencoderKL(
    (encoder): Encoder(
      (conv_in): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (down_blocks): ModuleList(
        (0): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0-1): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (downsamplers): ModuleList(
            (0): Downsample2D(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
            )
          )
        )
        (1): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (downsamplers): ModuleList(
            (0): Downsample2D(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2))
            )
          )
        )
        (2): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (downsamplers): ModuleList(
            (0): Downsample2D(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2))
            )
          )
        )
        (3): DownEncoderBlock2D(
          (resnets): ModuleList(
            (0-1): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
        )
      )
      (mid_block): UNetMidBlock2D(
        (attentions): ModuleList(
          (0): AttentionBlock(
            (group_norm): GroupNorm(32, 512, eps=1e-06, affine=True)
            (query): Linear(in_features=512, out_features=512, bias=True)
            (key): Linear(in_features=512, out_features=512, bias=True)
            (value): Linear(in_features=512, out_features=512, bias=True)
            (proj_attn): Linear(in_features=512, out_features=512, bias=True)
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
      )
      (conv_norm_out): GroupNorm(32, 512, eps=1e-06, affine=True)
      (conv_act): SiLU()
      (conv_out): Conv2d(512, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (decoder): Decoder(
      (conv_in): Conv2d(4, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (up_blocks): ModuleList(
        (0-1): 2 x UpDecoderBlock2D(
          (resnets): ModuleList(
            (0-2): 3 x ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (upsamplers): ModuleList(
            (0): Upsample2D(
              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
        )
        (2): UpDecoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
              (conv1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1-2): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 256, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
          (upsamplers): ModuleList(
            (0): Upsample2D(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
        )
        (3): UpDecoderBlock2D(
          (resnets): ModuleList(
            (0): ResnetBlock2D(
              (norm1): GroupNorm(32, 256, eps=1e-06, affine=True)
              (conv1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
              (conv_shortcut): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            )
            (1-2): 2 x ResnetBlock2D(
              (norm1): GroupNorm(32, 128, eps=1e-06, affine=True)
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm2): GroupNorm(32, 128, eps=1e-06, affine=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (nonlinearity): SiLU()
            )
          )
        )
      )
      (mid_block): UNetMidBlock2D(
        (attentions): ModuleList(
          (0): AttentionBlock(
            (group_norm): GroupNorm(32, 512, eps=1e-06, affine=True)
            (query): Linear(in_features=512, out_features=512, bias=True)
            (key): Linear(in_features=512, out_features=512, bias=True)
            (value): Linear(in_features=512, out_features=512, bias=True)
            (proj_attn): Linear(in_features=512, out_features=512, bias=True)
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 512, eps=1e-06, affine=True)
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (norm2): GroupNorm(32, 512, eps=1e-06, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
      )
      (conv_norm_out): GroupNorm(32, 128, eps=1e-06, affine=True)
      (conv_act): SiLU()
      (conv_out): Conv2d(128, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (quant_conv): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
    (post_quant_conv): Conv2d(4, 4, kernel_size=(1, 1), stride=(1, 1))
  )
  (text_encoder): CLIPTextModel(
    (text_model): CLIPTextTransformer(
      (embeddings): CLIPTextEmbeddings(
        (token_embedding): Embedding(49440, 768)
        (position_embedding): Embedding(77, 768)
      )
      (encoder): CLIPEncoder(
        (layers): ModuleList(
          (0-11): 12 x CLIPEncoderLayer(
            (self_attn): CLIPSdpaAttention(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (layer_norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): CLIPMLP(
              (activation_fn): QuickGELUActivation()
              (fc1): Linear(in_features=768, out_features=3072, bias=True)
              (fc2): Linear(in_features=3072, out_features=768, bias=True)
            )
            (layer_norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (unet): UNet2DConditionModel(
    (conv_in): Conv2d(4, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (time_proj): Timesteps()
    (time_embedding): TimestepEmbedding(
      (linear_1): Linear(in_features=320, out_features=1280, bias=True)
      (act): SiLU()
      (linear_2): Linear(in_features=1280, out_features=1280, bias=True)
    )
    (down_blocks): ModuleList(
      (0): CrossAttnDownBlock2D(
        (attentions): ModuleList(
          (0-1): 2 x Transformer2DModel(
            (norm): GroupNorm(32, 320, eps=1e-06, affine=True)
            (proj_in): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=320, out_features=320, bias=False)
                  (to_v): Linear(in_features=320, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=320, out_features=2560, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=1280, out_features=320, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=768, out_features=320, bias=False)
                  (to_v): Linear(in_features=768, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 320, eps=1e-05, affine=True)
            (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=320, bias=True)
            (norm2): GroupNorm(32, 320, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
        (downsamplers): ModuleList(
          (0): Downsample2D(
            (conv): Conv2d(320, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
      )
      (1): CrossAttnDownBlock2D(
        (attentions): ModuleList(
          (0-1): 2 x Transformer2DModel(
            (norm): GroupNorm(32, 640, eps=1e-06, affine=True)
            (proj_in): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=640, out_features=640, bias=False)
                  (to_v): Linear(in_features=640, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=640, out_features=5120, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=2560, out_features=640, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=768, out_features=640, bias=False)
                  (to_v): Linear(in_features=768, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 320, eps=1e-05, affine=True)
            (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock2D(
            (norm1): GroupNorm(32, 640, eps=1e-05, affine=True)
            (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
        (downsamplers): ModuleList(
          (0): Downsample2D(
            (conv): Conv2d(640, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
      )
      (2): CrossAttnDownBlock2D(
        (attentions): ModuleList(
          (0-1): 2 x Transformer2DModel(
            (norm): GroupNorm(32, 1280, eps=1e-06, affine=True)
            (proj_in): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_v): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=1280, out_features=10240, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=5120, out_features=1280, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=768, out_features=1280, bias=False)
                  (to_v): Linear(in_features=768, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 640, eps=1e-05, affine=True)
            (conv1): Conv2d(640, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(640, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock2D(
            (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (conv1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
        (downsamplers): ModuleList(
          (0): Downsample2D(
            (conv): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          )
        )
      )
      (3): DownBlock2D(
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (conv1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
          )
        )
      )
    )
    (up_blocks): ModuleList(
      (0): UpBlock2D(
        (resnets): ModuleList(
          (0-2): 3 x ResnetBlock2D(
            (norm1): GroupNorm(32, 2560, eps=1e-05, affine=True)
            (conv1): Conv2d(2560, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(2560, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (upsamplers): ModuleList(
          (0): Upsample2D(
            (conv): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (1): CrossAttnUpBlock2D(
        (attentions): ModuleList(
          (0-2): 3 x Transformer2DModel(
            (norm): GroupNorm(32, 1280, eps=1e-06, affine=True)
            (proj_in): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_v): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=1280, out_features=10240, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=5120, out_features=1280, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                  (to_k): Linear(in_features=768, out_features=1280, bias=False)
                  (to_v): Linear(in_features=768, out_features=1280, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=1280, out_features=1280, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0-1): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 2560, eps=1e-05, affine=True)
            (conv1): Conv2d(2560, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(2560, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): ResnetBlock2D(
            (norm1): GroupNorm(32, 1920, eps=1e-05, affine=True)
            (conv1): Conv2d(1920, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
            (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(1920, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (upsamplers): ModuleList(
          (0): Upsample2D(
            (conv): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (2): CrossAttnUpBlock2D(
        (attentions): ModuleList(
          (0-2): 3 x Transformer2DModel(
            (norm): GroupNorm(32, 640, eps=1e-06, affine=True)
            (proj_in): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=640, out_features=640, bias=False)
                  (to_v): Linear(in_features=640, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=640, out_features=5120, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=2560, out_features=640, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=640, out_features=640, bias=False)
                  (to_k): Linear(in_features=768, out_features=640, bias=False)
                  (to_v): Linear(in_features=768, out_features=640, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=640, out_features=640, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((640,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 1920, eps=1e-05, affine=True)
            (conv1): Conv2d(1920, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(1920, 640, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock2D(
            (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
            (conv1): Conv2d(1280, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(1280, 640, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): ResnetBlock2D(
            (norm1): GroupNorm(32, 960, eps=1e-05, affine=True)
            (conv1): Conv2d(960, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=640, bias=True)
            (norm2): GroupNorm(32, 640, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(960, 640, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (upsamplers): ModuleList(
          (0): Upsample2D(
            (conv): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (3): CrossAttnUpBlock2D(
        (attentions): ModuleList(
          (0-2): 3 x Transformer2DModel(
            (norm): GroupNorm(32, 320, eps=1e-06, affine=True)
            (proj_in): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
            (transformer_blocks): ModuleList(
              (0): BasicTransformerBlock(
                (attn1): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=320, out_features=320, bias=False)
                  (to_v): Linear(in_features=320, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (ff): FeedForward(
                  (net): ModuleList(
                    (0): GEGLU(
                      (proj): Linear(in_features=320, out_features=2560, bias=True)
                    )
                    (1): Dropout(p=0.0, inplace=False)
                    (2): Linear(in_features=1280, out_features=320, bias=True)
                  )
                )
                (attn2): CrossAttention(
                  (to_q): Linear(in_features=320, out_features=320, bias=False)
                  (to_k): Linear(in_features=768, out_features=320, bias=False)
                  (to_v): Linear(in_features=768, out_features=320, bias=False)
                  (to_out): ModuleList(
                    (0): Linear(in_features=320, out_features=320, bias=True)
                    (1): Dropout(p=0.0, inplace=False)
                  )
                )
                (norm1): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm2): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
                (norm3): LayerNorm((320,), eps=1e-05, elementwise_affine=True)
              )
            )
            (proj_out): Conv2d(320, 320, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (resnets): ModuleList(
          (0): ResnetBlock2D(
            (norm1): GroupNorm(32, 960, eps=1e-05, affine=True)
            (conv1): Conv2d(960, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=320, bias=True)
            (norm2): GroupNorm(32, 320, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1))
          )
          (1-2): 2 x ResnetBlock2D(
            (norm1): GroupNorm(32, 640, eps=1e-05, affine=True)
            (conv1): Conv2d(640, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (time_emb_proj): Linear(in_features=1280, out_features=320, bias=True)
            (norm2): GroupNorm(32, 320, eps=1e-05, affine=True)
            (dropout): Dropout(p=0.0, inplace=False)
            (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (nonlinearity): SiLU()
            (conv_shortcut): Conv2d(640, 320, kernel_size=(1, 1), stride=(1, 1))
          )
        )
      )
    )
    (mid_block): UNetMidBlock2DCrossAttn(
      (attentions): ModuleList(
        (0): Transformer2DModel(
          (norm): GroupNorm(32, 1280, eps=1e-06, affine=True)
          (proj_in): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
          (transformer_blocks): ModuleList(
            (0): BasicTransformerBlock(
              (attn1): CrossAttention(
                (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                (to_k): Linear(in_features=1280, out_features=1280, bias=False)
                (to_v): Linear(in_features=1280, out_features=1280, bias=False)
                (to_out): ModuleList(
                  (0): Linear(in_features=1280, out_features=1280, bias=True)
                  (1): Dropout(p=0.0, inplace=False)
                )
              )
              (ff): FeedForward(
                (net): ModuleList(
                  (0): GEGLU(
                    (proj): Linear(in_features=1280, out_features=10240, bias=True)
                  )
                  (1): Dropout(p=0.0, inplace=False)
                  (2): Linear(in_features=5120, out_features=1280, bias=True)
                )
              )
              (attn2): CrossAttention(
                (to_q): Linear(in_features=1280, out_features=1280, bias=False)
                (to_k): Linear(in_features=768, out_features=1280, bias=False)
                (to_v): Linear(in_features=768, out_features=1280, bias=False)
                (to_out): ModuleList(
                  (0): Linear(in_features=1280, out_features=1280, bias=True)
                  (1): Dropout(p=0.0, inplace=False)
                )
              )
              (norm1): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
              (norm3): LayerNorm((1280,), eps=1e-05, elementwise_affine=True)
            )
          )
          (proj_out): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (resnets): ModuleList(
        (0-1): 2 x ResnetBlock2D(
          (norm1): GroupNorm(32, 1280, eps=1e-05, affine=True)
          (conv1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (time_emb_proj): Linear(in_features=1280, out_features=1280, bias=True)
          (norm2): GroupNorm(32, 1280, eps=1e-05, affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (conv2): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (nonlinearity): SiLU()
        )
      )
    )
    (conv_norm_out): GroupNorm(32, 320, eps=1e-05, affine=True)
    (conv_act): SiLU()
    (conv_out): Conv2d(320, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (text_encoder_lora): ModuleList(
    (0-47): 48 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=768, bias=False)
    )
  )
  (unet_lora): ModuleList(
    (0-4): 5 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (5-6): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (7-12): 6 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (13-14): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (15): LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (16-20): 5 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (21-22): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (23-28): 6 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (29-30): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (31): LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (32-36): 5 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (37-38): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (39-44): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (45-46): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (47-52): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (53-54): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (55-60): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (61-62): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (63-68): 6 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (69-70): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (71): LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (72-76): 5 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (77-78): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (79-84): 6 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (85-86): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (87-92): 6 x LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (93-94): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (95): LoRALinearLayer(
      (down): Linear(in_features=640, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=640, bias=False)
    )
    (96-100): 5 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (101-102): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (103-108): 6 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (109-110): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (111-116): 6 x LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (117-118): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (119): LoRALinearLayer(
      (down): Linear(in_features=320, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=320, bias=False)
    )
    (120-124): 5 x LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (125-126): 2 x LoRALinearLayer(
      (down): Linear(in_features=768, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
    (127): LoRALinearLayer(
      (down): Linear(in_features=1280, out_features=4, bias=False)
      (up): Linear(in_features=4, out_features=1280, bias=False)
    )
  )
)
2024-12-09 08:28:36,094 INFO: Loss [KDELoss] is created.
2024-12-09 08:28:36,094 INFO: Scale learning rate to: 0.00e+00
2024-12-09 08:28:36,096 INFO: Model [EDLoraModel] is created.
2024-12-09 08:28:42,457 INFO: Use cuda prefetch dataloader
2024-12-09 08:28:42,458 INFO: Start training from epoch: 0, iter: 0
2024-12-09 08:29:06,801 INFO: [flowe..][epoch:  0, iter:      10, lr:(9.910e-04,9.910e-06,9.910e-05,)] [eta: 0:16:39, time (data): 2.434 (0.672)] loss: -3.7679e-01 token_reg: -4.1070e-01 Norm_mean: 3.8844e-01 
2024-12-09 08:29:19,224 INFO: [flowe..][epoch:  0, iter:      20, lr:(9.810e-04,9.810e-06,9.810e-05,)] [eta: 0:18:17, time (data): 1.838 (0.336)] loss: -3.2878e-01 token_reg: -4.1070e-01 Norm_mean: 4.0009e-01 
2024-12-09 08:29:31,704 INFO: [flowe..][epoch:  0, iter:      30, lr:(9.710e-04,9.710e-06,9.710e-05,)] [eta: 0:18:45, time (data): 1.641 (0.224)] loss: -1.1261e-01 token_reg: -4.1070e-01 Norm_mean: 4.1047e-01 
2024-12-09 08:29:44,133 INFO: [flowe..][epoch:  0, iter:      40, lr:(9.610e-04,9.610e-06,9.610e-05,)] [eta: 0:18:53, time (data): 1.542 (0.168)] loss: 6.5401e-01 token_reg: -4.1070e-01 Norm_mean: 4.1915e-01 
2024-12-09 08:29:56,547 INFO: [flowe..][epoch:  0, iter:      50, lr:(9.510e-04,9.510e-06,9.510e-05,)] [eta: 0:18:52, time (data): 1.482 (0.135)] loss: -3.3094e-01 token_reg: -4.1070e-01 Norm_mean: 4.2700e-01 
2024-12-09 08:30:08,940 INFO: [flowe..][epoch:  0, iter:      60, lr:(9.410e-04,9.410e-06,9.410e-05,)] [eta: 0:18:47, time (data): 1.441 (0.112)] loss: 9.0058e-01 token_reg: -4.1070e-01 Norm_mean: 4.3311e-01 
2024-12-09 08:30:21,326 INFO: [flowe..][epoch:  0, iter:      70, lr:(9.310e-04,9.310e-06,9.310e-05,)] [eta: 0:18:40, time (data): 1.412 (0.096)] loss: -1.8425e-01 token_reg: -4.1069e-01 Norm_mean: 4.3944e-01 
2024-12-09 08:30:33,728 INFO: [flowe..][epoch:  0, iter:      80, lr:(9.210e-04,9.210e-06,9.210e-05,)] [eta: 0:18:32, time (data): 1.391 (0.084)] loss: -3.7888e-01 token_reg: -4.1069e-01 Norm_mean: 4.4574e-01 
2024-12-09 08:30:46,137 INFO: [flowe..][epoch:  0, iter:      90, lr:(9.110e-04,9.110e-06,9.110e-05,)] [eta: 0:18:23, time (data): 1.374 (0.075)] loss: -3.7804e-01 token_reg: -4.1069e-01 Norm_mean: 4.5088e-01 
2024-12-09 08:30:58,571 INFO: [flowe..][epoch:  0, iter:     100, lr:(9.010e-04,9.010e-06,9.010e-05,)] [eta: 0:18:13, time (data): 1.361 (0.068)] loss: 1.1446e-01 token_reg: -4.1069e-01 Norm_mean: 4.5575e-01 
2024-12-09 08:31:11,004 INFO: [flowe..][epoch:  0, iter:     110, lr:(8.910e-04,8.910e-06,8.910e-05,)] [eta: 0:18:03, time (data): 1.350 (0.062)] loss: 4.5189e-02 token_reg: -4.1069e-01 Norm_mean: 4.6008e-01 
2024-12-09 08:31:23,413 INFO: [flowe..][epoch:  0, iter:     120, lr:(8.810e-04,8.810e-06,8.810e-05,)] [eta: 0:17:53, time (data): 1.341 (0.056)] loss: -1.6385e-01 token_reg: -4.1069e-01 Norm_mean: 4.6360e-01 
2024-12-09 08:31:35,817 INFO: [flowe..][epoch:  0, iter:     130, lr:(8.710e-04,8.710e-06,8.710e-05,)] [eta: 0:17:42, time (data): 1.333 (0.052)] loss: 4.0210e-01 token_reg: -4.1069e-01 Norm_mean: 4.6691e-01 
2024-12-09 08:31:48,212 INFO: [flowe..][epoch:  0, iter:     140, lr:(8.610e-04,8.610e-06,8.610e-05,)] [eta: 0:17:31, time (data): 1.327 (0.048)] loss: -3.8568e-01 token_reg: -4.1069e-01 Norm_mean: 4.7063e-01 
2024-12-09 08:32:00,606 INFO: [flowe..][epoch:  0, iter:     150, lr:(8.510e-04,8.510e-06,8.510e-05,)] [eta: 0:17:19, time (data): 1.321 (0.045)] loss: -2.7351e-01 token_reg: -4.1069e-01 Norm_mean: 4.7504e-01 
2024-12-09 08:32:13,004 INFO: [flowe..][epoch:  0, iter:     160, lr:(8.410e-04,8.410e-06,8.410e-05,)] [eta: 0:17:08, time (data): 1.316 (0.042)] loss: -3.7999e-01 token_reg: -4.1069e-01 Norm_mean: 4.7921e-01 
2024-12-09 08:32:25,401 INFO: [flowe..][epoch:  0, iter:     170, lr:(8.310e-04,8.310e-06,8.310e-05,)] [eta: 0:16:56, time (data): 1.311 (0.040)] loss: -3.9284e-01 token_reg: -4.1069e-01 Norm_mean: 4.8210e-01 
2024-12-09 08:32:37,811 INFO: [flowe..][epoch:  0, iter:     180, lr:(8.210e-04,8.210e-06,8.210e-05,)] [eta: 0:16:45, time (data): 1.307 (0.038)] loss: -3.1904e-01 token_reg: -4.1069e-01 Norm_mean: 4.8469e-01 
2024-12-09 08:32:50,213 INFO: [flowe..][epoch:  0, iter:     190, lr:(8.110e-04,8.110e-06,8.110e-05,)] [eta: 0:16:33, time (data): 1.304 (0.036)] loss: -3.9399e-01 token_reg: -4.1069e-01 Norm_mean: 4.8780e-01 
2024-12-09 08:33:02,608 INFO: [flowe..][epoch:  0, iter:     200, lr:(8.010e-04,8.010e-06,8.010e-05,)] [eta: 0:16:21, time (data): 1.301 (0.034)] loss: 6.1747e-01 token_reg: -4.1069e-01 Norm_mean: 4.9109e-01 
2024-12-09 08:33:02,610 INFO: Saving models and training states.
2024-12-09 08:33:02,629 INFO: text_encoder moved: 5.0843703547798214e-05
2024-12-09 08:33:02,675 INFO: unet moved: 0.0005971530629267363
2024-12-09 08:33:15,721 INFO: [flowe..][epoch:  0, iter:     210, lr:(7.910e-04,7.910e-06,7.910e-05,)] [eta: 0:16:12, time (data): 1.239 (0.001)] loss: 2.3045e-01 token_reg: -4.1069e-01 Norm_mean: 4.9669e-01 
2024-12-09 08:33:28,117 INFO: [flowe..][epoch:  0, iter:     220, lr:(7.810e-04,7.810e-06,7.810e-05,)] [eta: 0:16:00, time (data): 1.239 (0.000)] loss: 1.1924e+00 token_reg: -4.1069e-01 Norm_mean: 5.0193e-01 
2024-12-09 08:33:40,517 INFO: [flowe..][epoch:  0, iter:     230, lr:(7.710e-04,7.710e-06,7.710e-05,)] [eta: 0:15:48, time (data): 1.239 (0.000)] loss: 1.1490e-01 token_reg: -4.1068e-01 Norm_mean: 5.0591e-01 
2024-12-09 08:33:52,911 INFO: [flowe..][epoch:  0, iter:     240, lr:(7.610e-04,7.610e-06,7.610e-05,)] [eta: 0:15:36, time (data): 1.239 (0.000)] loss: 1.3233e+00 token_reg: -4.1068e-01 Norm_mean: 5.0940e-01 
2024-12-09 08:34:05,311 INFO: [flowe..][epoch:  0, iter:     250, lr:(7.510e-04,7.510e-06,7.510e-05,)] [eta: 0:15:23, time (data): 1.239 (0.000)] loss: 1.4381e+00 token_reg: -4.1068e-01 Norm_mean: 5.1286e-01 
2024-12-09 08:34:17,704 INFO: [flowe..][epoch:  0, iter:     260, lr:(7.410e-04,7.410e-06,7.410e-05,)] [eta: 0:15:11, time (data): 1.239 (0.000)] loss: 2.2489e-01 token_reg: -4.1068e-01 Norm_mean: 5.1579e-01 
2024-12-09 08:34:30,099 INFO: [flowe..][epoch:  0, iter:     270, lr:(7.310e-04,7.310e-06,7.310e-05,)] [eta: 0:14:59, time (data): 1.239 (0.000)] loss: 8.5349e-01 token_reg: -4.1068e-01 Norm_mean: 5.1912e-01 
2024-12-09 08:34:42,496 INFO: [flowe..][epoch:  0, iter:     280, lr:(7.210e-04,7.210e-06,7.210e-05,)] [eta: 0:14:47, time (data): 1.239 (0.000)] loss: -2.2904e-01 token_reg: -4.1068e-01 Norm_mean: 5.2295e-01 
2024-12-09 08:34:54,892 INFO: [flowe..][epoch:  0, iter:     290, lr:(7.110e-04,7.110e-06,7.110e-05,)] [eta: 0:14:35, time (data): 1.239 (0.000)] loss: 3.3836e-01 token_reg: -4.1068e-01 Norm_mean: 5.2543e-01 
2024-12-09 08:35:07,288 INFO: [flowe..][epoch:  0, iter:     300, lr:(7.010e-04,7.010e-06,7.010e-05,)] [eta: 0:14:22, time (data): 1.239 (0.000)] loss: 2.2534e-01 token_reg: -4.1068e-01 Norm_mean: 5.2709e-01 
2024-12-09 08:35:19,684 INFO: [flowe..][epoch:  0, iter:     310, lr:(6.910e-04,6.910e-06,6.910e-05,)] [eta: 0:14:10, time (data): 1.239 (0.000)] loss: -3.1874e-01 token_reg: -4.1068e-01 Norm_mean: 5.2867e-01 
2024-12-09 08:35:32,100 INFO: [flowe..][epoch:  0, iter:     320, lr:(6.810e-04,6.810e-06,6.810e-05,)] [eta: 0:13:58, time (data): 1.240 (0.000)] loss: -1.9990e-02 token_reg: -4.1068e-01 Norm_mean: 5.3045e-01 
2024-12-09 08:35:44,497 INFO: [flowe..][epoch:  0, iter:     330, lr:(6.710e-04,6.710e-06,6.710e-05,)] [eta: 0:13:46, time (data): 1.240 (0.000)] loss: -3.8428e-01 token_reg: -4.1068e-01 Norm_mean: 5.3235e-01 
2024-12-09 08:35:56,893 INFO: [flowe..][epoch:  0, iter:     340, lr:(6.610e-04,6.610e-06,6.610e-05,)] [eta: 0:13:34, time (data): 1.240 (0.000)] loss: 9.0479e-01 token_reg: -4.1068e-01 Norm_mean: 5.3416e-01 
2024-12-09 08:36:09,308 INFO: [flowe..][epoch:  0, iter:     350, lr:(6.510e-04,6.510e-06,6.510e-05,)] [eta: 0:13:21, time (data): 1.240 (0.000)] loss: 5.0544e-01 token_reg: -4.1068e-01 Norm_mean: 5.3566e-01 
2024-12-09 08:36:21,704 INFO: [flowe..][epoch:  0, iter:     360, lr:(6.410e-04,6.410e-06,6.410e-05,)] [eta: 0:13:09, time (data): 1.240 (0.000)] loss: -1.3735e-01 token_reg: -4.1068e-01 Norm_mean: 5.3776e-01 
2024-12-09 08:36:34,100 INFO: [flowe..][epoch:  0, iter:     370, lr:(6.310e-04,6.310e-06,6.310e-05,)] [eta: 0:12:57, time (data): 1.240 (0.000)] loss: -3.7320e-01 token_reg: -4.1068e-01 Norm_mean: 5.3968e-01 
2024-12-09 08:36:46,498 INFO: [flowe..][epoch:  0, iter:     380, lr:(6.210e-04,6.210e-06,6.210e-05,)] [eta: 0:12:44, time (data): 1.240 (0.000)] loss: -3.7315e-01 token_reg: -4.1068e-01 Norm_mean: 5.4114e-01 
2024-12-09 08:36:58,893 INFO: [flowe..][epoch:  0, iter:     390, lr:(6.110e-04,6.110e-06,6.110e-05,)] [eta: 0:12:32, time (data): 1.240 (0.000)] loss: 7.5090e-01 token_reg: -4.1068e-01 Norm_mean: 5.4253e-01 
2024-12-09 08:37:11,289 INFO: [flowe..][epoch:  0, iter:     400, lr:(6.010e-04,6.010e-06,6.010e-05,)] [eta: 0:12:20, time (data): 1.240 (0.000)] loss: -3.5123e-01 token_reg: -4.1068e-01 Norm_mean: 5.4426e-01 
2024-12-09 08:37:11,290 INFO: Saving models and training states.
2024-12-09 08:37:11,306 INFO: text_encoder moved: 6.776001706991035e-05
2024-12-09 08:37:11,350 INFO: unet moved: 0.0008160496586242516
2024-12-09 08:37:24,402 INFO: [flowe..][epoch:  0, iter:     410, lr:(5.910e-04,5.910e-06,5.910e-05,)] [eta: 0:12:09, time (data): 1.241 (0.001)] loss: -3.1318e-01 token_reg: -4.1068e-01 Norm_mean: 5.4635e-01 
2024-12-09 08:37:36,800 INFO: [flowe..][epoch:  0, iter:     420, lr:(5.810e-04,5.810e-06,5.810e-05,)] [eta: 0:11:56, time (data): 1.240 (0.000)] loss: 7.4344e-01 token_reg: -4.1068e-01 Norm_mean: 5.4779e-01 
2024-12-09 08:37:49,199 INFO: [flowe..][epoch:  0, iter:     430, lr:(5.710e-04,5.710e-06,5.710e-05,)] [eta: 0:11:44, time (data): 1.240 (0.000)] loss: -3.6827e-01 token_reg: -4.1068e-01 Norm_mean: 5.4926e-01 
2024-12-09 08:38:01,592 INFO: [flowe..][epoch:  0, iter:     440, lr:(5.610e-04,5.610e-06,5.610e-05,)] [eta: 0:11:31, time (data): 1.240 (0.000)] loss: -3.2889e-01 token_reg: -4.1068e-01 Norm_mean: 5.5089e-01 
2024-12-09 08:38:13,989 INFO: [flowe..][epoch:  0, iter:     450, lr:(5.510e-04,5.510e-06,5.510e-05,)] [eta: 0:11:19, time (data): 1.240 (0.000)] loss: -3.5436e-01 token_reg: -4.1068e-01 Norm_mean: 5.5298e-01 
2024-12-09 08:38:26,384 INFO: [flowe..][epoch:  0, iter:     460, lr:(5.410e-04,5.410e-06,5.410e-05,)] [eta: 0:11:07, time (data): 1.240 (0.000)] loss: -3.0468e-01 token_reg: -4.1068e-01 Norm_mean: 5.5511e-01 
2024-12-09 08:38:38,781 INFO: [flowe..][epoch:  0, iter:     470, lr:(5.310e-04,5.310e-06,5.310e-05,)] [eta: 0:10:54, time (data): 1.240 (0.000)] loss: -1.5503e-01 token_reg: -4.1068e-01 Norm_mean: 5.5696e-01 
2024-12-09 08:38:51,177 INFO: [flowe..][epoch:  0, iter:     480, lr:(5.210e-04,5.210e-06,5.210e-05,)] [eta: 0:10:42, time (data): 1.240 (0.000)] loss: -3.3822e-01 token_reg: -4.1067e-01 Norm_mean: 5.5881e-01 
2024-12-09 08:39:03,575 INFO: [flowe..][epoch:  0, iter:     490, lr:(5.110e-04,5.110e-06,5.110e-05,)] [eta: 0:10:30, time (data): 1.240 (0.000)] loss: -1.3489e-01 token_reg: -4.1067e-01 Norm_mean: 5.6063e-01 
2024-12-09 08:39:15,989 INFO: [flowe..][epoch:  0, iter:     500, lr:(5.010e-04,5.010e-06,5.010e-05,)] [eta: 0:10:17, time (data): 1.240 (0.000)] loss: 8.8673e-01 token_reg: -4.1067e-01 Norm_mean: 5.6217e-01 
2024-12-09 08:39:28,384 INFO: [flowe..][epoch:  0, iter:     510, lr:(4.910e-04,4.910e-06,4.910e-05,)] [eta: 0:10:05, time (data): 1.240 (0.000)] loss: 6.4680e-01 token_reg: -4.1067e-01 Norm_mean: 5.6354e-01 
2024-12-09 08:39:40,781 INFO: [flowe..][epoch:  0, iter:     520, lr:(4.810e-04,4.810e-06,4.810e-05,)] [eta: 0:09:53, time (data): 1.240 (0.000)] loss: 1.7037e+00 token_reg: -4.1067e-01 Norm_mean: 5.6521e-01 
2024-12-09 08:39:53,195 INFO: [flowe..][epoch:  0, iter:     530, lr:(4.710e-04,4.710e-06,4.710e-05,)] [eta: 0:09:40, time (data): 1.240 (0.000)] loss: 1.6019e-01 token_reg: -4.1067e-01 Norm_mean: 5.6666e-01 
2024-12-09 08:40:05,592 INFO: [flowe..][epoch:  0, iter:     540, lr:(4.610e-04,4.610e-06,4.610e-05,)] [eta: 0:09:28, time (data): 1.240 (0.000)] loss: 5.4581e-01 token_reg: -4.1067e-01 Norm_mean: 5.6794e-01 
2024-12-09 08:40:18,007 INFO: [flowe..][epoch:  0, iter:     550, lr:(4.510e-04,4.510e-06,4.510e-05,)] [eta: 0:09:16, time (data): 1.240 (0.000)] loss: 8.0713e-01 token_reg: -4.1067e-01 Norm_mean: 5.6948e-01 
2024-12-09 08:40:30,406 INFO: [flowe..][epoch:  0, iter:     560, lr:(4.410e-04,4.410e-06,4.410e-05,)] [eta: 0:09:03, time (data): 1.240 (0.000)] loss: 1.0572e+00 token_reg: -4.1067e-01 Norm_mean: 5.7152e-01 
2024-12-09 08:40:42,800 INFO: [flowe..][epoch:  0, iter:     570, lr:(4.310e-04,4.310e-06,4.310e-05,)] [eta: 0:08:51, time (data): 1.240 (0.000)] loss: -3.9159e-01 token_reg: -4.1067e-01 Norm_mean: 5.7338e-01 
2024-12-09 08:40:55,198 INFO: [flowe..][epoch:  0, iter:     580, lr:(4.210e-04,4.210e-06,4.210e-05,)] [eta: 0:08:38, time (data): 1.240 (0.000)] loss: -1.4196e-01 token_reg: -4.1067e-01 Norm_mean: 5.7464e-01 
2024-12-09 08:41:07,592 INFO: [flowe..][epoch:  0, iter:     590, lr:(4.110e-04,4.110e-06,4.110e-05,)] [eta: 0:08:26, time (data): 1.240 (0.000)] loss: 4.2934e-01 token_reg: -4.1067e-01 Norm_mean: 5.7551e-01 
2024-12-09 08:41:19,990 INFO: [flowe..][epoch:  0, iter:     600, lr:(4.010e-04,4.010e-06,4.010e-05,)] [eta: 0:08:14, time (data): 1.240 (0.000)] loss: 6.1698e-01 token_reg: -4.1067e-01 Norm_mean: 5.7609e-01 
2024-12-09 08:41:19,991 INFO: Saving models and training states.
2024-12-09 08:41:20,007 INFO: text_encoder moved: 7.627016384503804e-05
2024-12-09 08:41:20,054 INFO: unet moved: 0.0009608792670405819
2024-12-09 08:41:33,101 INFO: [flowe..][epoch:  0, iter:     610, lr:(3.910e-04,3.910e-06,3.910e-05,)] [eta: 0:08:02, time (data): 1.240 (0.000)] loss: -3.8082e-01 token_reg: -4.1067e-01 Norm_mean: 5.7676e-01 
2024-12-09 08:41:45,520 INFO: [flowe..][epoch:  0, iter:     620, lr:(3.810e-04,3.810e-06,3.810e-05,)] [eta: 0:07:49, time (data): 1.241 (0.000)] loss: 7.8718e-01 token_reg: -4.1067e-01 Norm_mean: 5.7740e-01 
2024-12-09 08:41:57,924 INFO: [flowe..][epoch:  0, iter:     630, lr:(3.710e-04,3.710e-06,3.710e-05,)] [eta: 0:07:37, time (data): 1.241 (0.000)] loss: -2.2008e-02 token_reg: -4.1067e-01 Norm_mean: 5.7820e-01 
2024-12-09 08:42:10,343 INFO: [flowe..][epoch:  0, iter:     640, lr:(3.610e-04,3.610e-06,3.610e-05,)] [eta: 0:07:25, time (data): 1.241 (0.000)] loss: 3.9263e-01 token_reg: -4.1067e-01 Norm_mean: 5.7893e-01 
2024-12-09 08:42:22,749 INFO: [flowe..][epoch:  0, iter:     650, lr:(3.510e-04,3.510e-06,3.510e-05,)] [eta: 0:07:12, time (data): 1.241 (0.000)] loss: 1.9906e+00 token_reg: -4.1067e-01 Norm_mean: 5.7962e-01 
2024-12-09 08:42:35,164 INFO: [flowe..][epoch:  0, iter:     660, lr:(3.410e-04,3.410e-06,3.410e-05,)] [eta: 0:07:00, time (data): 1.241 (0.000)] loss: -2.7223e-01 token_reg: -4.1067e-01 Norm_mean: 5.8016e-01 
2024-12-09 08:42:47,569 INFO: [flowe..][epoch:  0, iter:     670, lr:(3.310e-04,3.310e-06,3.310e-05,)] [eta: 0:06:47, time (data): 1.241 (0.000)] loss: -3.9053e-01 token_reg: -4.1067e-01 Norm_mean: 5.8063e-01 
2024-12-09 08:42:59,976 INFO: [flowe..][epoch:  0, iter:     680, lr:(3.210e-04,3.210e-06,3.210e-05,)] [eta: 0:06:35, time (data): 1.241 (0.000)] loss: 1.1134e+00 token_reg: -4.1067e-01 Norm_mean: 5.8102e-01 
2024-12-09 08:43:12,372 INFO: [flowe..][epoch:  0, iter:     690, lr:(3.110e-04,3.110e-06,3.110e-05,)] [eta: 0:06:23, time (data): 1.241 (0.000)] loss: -9.9945e-02 token_reg: -4.1067e-01 Norm_mean: 5.8143e-01 
2024-12-09 08:43:24,766 INFO: [flowe..][epoch:  0, iter:     700, lr:(3.010e-04,3.010e-06,3.010e-05,)] [eta: 0:06:10, time (data): 1.241 (0.000)] loss: -1.9842e-01 token_reg: -4.1067e-01 Norm_mean: 5.8188e-01 
2024-12-09 08:43:37,165 INFO: [flowe..][epoch:  0, iter:     710, lr:(2.910e-04,2.910e-06,2.910e-05,)] [eta: 0:05:58, time (data): 1.240 (0.000)] loss: 1.2910e-01 token_reg: -4.1067e-01 Norm_mean: 5.8224e-01 
2024-12-09 08:43:49,560 INFO: [flowe..][epoch:  0, iter:     720, lr:(2.810e-04,2.810e-06,2.810e-05,)] [eta: 0:05:45, time (data): 1.240 (0.000)] loss: 2.3195e-01 token_reg: -4.1067e-01 Norm_mean: 5.8256e-01 
2024-12-09 08:44:01,956 INFO: [flowe..][epoch:  0, iter:     730, lr:(2.710e-04,2.710e-06,2.710e-05,)] [eta: 0:05:33, time (data): 1.240 (0.000)] loss: -3.5988e-01 token_reg: -4.1067e-01 Norm_mean: 5.8287e-01 
2024-12-09 08:44:14,352 INFO: [flowe..][epoch:  0, iter:     740, lr:(2.610e-04,2.610e-06,2.610e-05,)] [eta: 0:05:21, time (data): 1.240 (0.001)] loss: -2.9922e-01 token_reg: -4.1067e-01 Norm_mean: 5.8323e-01 
2024-12-09 08:44:26,748 INFO: [flowe..][epoch:  0, iter:     750, lr:(2.510e-04,2.510e-06,2.510e-05,)] [eta: 0:05:08, time (data): 1.240 (0.001)] loss: -2.4567e-01 token_reg: -4.1067e-01 Norm_mean: 5.8348e-01 
2024-12-09 08:44:39,144 INFO: [flowe..][epoch:  0, iter:     760, lr:(2.410e-04,2.410e-06,2.410e-05,)] [eta: 0:04:56, time (data): 1.240 (0.001)] loss: 1.4537e+00 token_reg: -4.1067e-01 Norm_mean: 5.8366e-01 
2024-12-09 08:44:51,541 INFO: [flowe..][epoch:  0, iter:     770, lr:(2.310e-04,2.310e-06,2.310e-05,)] [eta: 0:04:43, time (data): 1.240 (0.001)] loss: -3.0303e-01 token_reg: -4.1067e-01 Norm_mean: 5.8385e-01 
2024-12-09 08:45:03,936 INFO: [flowe..][epoch:  0, iter:     780, lr:(2.210e-04,2.210e-06,2.210e-05,)] [eta: 0:04:31, time (data): 1.240 (0.001)] loss: -3.5096e-01 token_reg: -4.1067e-01 Norm_mean: 5.8401e-01 
2024-12-09 08:45:16,333 INFO: [flowe..][epoch:  0, iter:     790, lr:(2.110e-04,2.110e-06,2.110e-05,)] [eta: 0:04:19, time (data): 1.240 (0.001)] loss: -2.0051e-01 token_reg: -4.1067e-01 Norm_mean: 5.8422e-01 
2024-12-09 08:45:30,031 INFO: [flowe..][epoch:  0, iter:     800, lr:(2.010e-04,2.010e-06,2.010e-05,)] [eta: 0:04:07, time (data): 1.247 (0.007)] loss: 1.5105e-01 token_reg: -4.1067e-01 Norm_mean: 5.8433e-01 
2024-12-09 08:45:30,033 INFO: Saving models and training states.
2024-12-09 08:45:30,047 INFO: text_encoder moved: 8.080186519994943e-05
2024-12-09 08:45:30,091 INFO: unet moved: 0.0010239187176921405
2024-12-09 08:45:49,522 INFO: [flowe..][epoch:  1, iter:     810, lr:(1.910e-04,1.910e-06,1.910e-05,)] [eta: 0:03:56, time (data): 1.237 (0.000)] loss: 4.5837e-01 token_reg: -4.1067e-01 Norm_mean: 5.8449e-01 
2024-12-09 08:46:01,988 INFO: [flowe..][epoch:  1, iter:     820, lr:(1.810e-04,1.810e-06,1.810e-05,)] [eta: 0:03:43, time (data): 1.243 (0.000)] loss: -3.8615e-01 token_reg: -4.1067e-01 Norm_mean: 5.8470e-01 
2024-12-09 08:46:14,475 INFO: [flowe..][epoch:  1, iter:     830, lr:(1.710e-04,1.710e-06,1.710e-05,)] [eta: 0:03:31, time (data): 1.245 (0.001)] loss: 2.5127e-01 token_reg: -4.1067e-01 Norm_mean: 5.8482e-01 
2024-12-09 08:46:26,915 INFO: [flowe..][epoch:  1, iter:     840, lr:(1.610e-04,1.610e-06,1.610e-05,)] [eta: 0:03:18, time (data): 1.245 (0.001)] loss: -2.3107e-01 token_reg: -4.1067e-01 Norm_mean: 5.8488e-01 
2024-12-09 08:46:39,325 INFO: [flowe..][epoch:  1, iter:     850, lr:(1.510e-04,1.510e-06,1.510e-05,)] [eta: 0:03:06, time (data): 1.244 (0.000)] loss: 2.4967e+00 token_reg: -4.1067e-01 Norm_mean: 5.8496e-01 
2024-12-09 08:46:51,720 INFO: [flowe..][epoch:  1, iter:     860, lr:(1.410e-04,1.410e-06,1.410e-05,)] [eta: 0:02:53, time (data): 1.243 (0.000)] loss: -3.0848e-01 token_reg: -4.1067e-01 Norm_mean: 5.8501e-01 
2024-12-09 08:47:04,115 INFO: [flowe..][epoch:  1, iter:     870, lr:(1.310e-04,1.310e-06,1.310e-05,)] [eta: 0:02:41, time (data): 1.243 (0.000)] loss: -2.0225e-01 token_reg: -4.1067e-01 Norm_mean: 5.8503e-01 
2024-12-09 08:47:16,575 INFO: [flowe..][epoch:  1, iter:     880, lr:(1.210e-04,1.210e-06,1.210e-05,)] [eta: 0:02:28, time (data): 1.243 (0.000)] loss: 2.3626e-02 token_reg: -4.1067e-01 Norm_mean: 5.8503e-01 
2024-12-09 08:47:28,970 INFO: [flowe..][epoch:  1, iter:     890, lr:(1.110e-04,1.110e-06,1.110e-05,)] [eta: 0:02:16, time (data): 1.243 (0.000)] loss: 1.5751e+00 token_reg: -4.1067e-01 Norm_mean: 5.8503e-01 
2024-12-09 08:47:41,367 INFO: [flowe..][epoch:  1, iter:     900, lr:(1.010e-04,1.010e-06,1.010e-05,)] [eta: 0:02:03, time (data): 1.242 (0.000)] loss: 1.2132e+00 token_reg: -4.1067e-01 Norm_mean: 5.8503e-01 
2024-12-09 08:47:53,790 INFO: [flowe..][epoch:  1, iter:     910, lr:(9.100e-05,9.100e-07,9.100e-06,)] [eta: 0:01:51, time (data): 1.242 (0.000)] loss: 2.1046e-01 token_reg: -4.1067e-01 Norm_mean: 5.8500e-01 
2024-12-09 08:48:06,212 INFO: [flowe..][epoch:  1, iter:     920, lr:(8.100e-05,8.100e-07,8.100e-06,)] [eta: 0:01:38, time (data): 1.242 (0.000)] loss: -7.1805e-02 token_reg: -4.1067e-01 Norm_mean: 5.8497e-01 
2024-12-09 08:48:18,615 INFO: [flowe..][epoch:  1, iter:     930, lr:(7.100e-05,7.100e-07,7.100e-06,)] [eta: 0:01:26, time (data): 1.242 (0.000)] loss: 1.2924e+00 token_reg: -4.1067e-01 Norm_mean: 5.8494e-01 
2024-12-09 08:48:31,009 INFO: [flowe..][epoch:  1, iter:     940, lr:(6.100e-05,6.100e-07,6.100e-06,)] [eta: 0:01:13, time (data): 1.242 (0.000)] loss: 6.9688e-02 token_reg: -4.1067e-01 Norm_mean: 5.8492e-01 
2024-12-09 08:48:43,405 INFO: [flowe..][epoch:  1, iter:     950, lr:(5.100e-05,5.100e-07,5.100e-06,)] [eta: 0:01:01, time (data): 1.242 (0.000)] loss: -7.0926e-02 token_reg: -4.1067e-01 Norm_mean: 5.8492e-01 
2024-12-09 08:48:55,803 INFO: [flowe..][epoch:  1, iter:     960, lr:(4.100e-05,4.100e-07,4.100e-06,)] [eta: 0:00:48, time (data): 1.242 (0.000)] loss: -3.9667e-01 token_reg: -4.1067e-01 Norm_mean: 5.8491e-01 
2024-12-09 08:49:08,199 INFO: [flowe..][epoch:  1, iter:     970, lr:(3.100e-05,3.100e-07,3.100e-06,)] [eta: 0:00:36, time (data): 1.241 (0.000)] loss: 3.0393e-01 token_reg: -4.1067e-01 Norm_mean: 5.8489e-01 
2024-12-09 08:49:20,594 INFO: [flowe..][epoch:  1, iter:     980, lr:(2.100e-05,2.100e-07,2.100e-06,)] [eta: 0:00:23, time (data): 1.241 (0.000)] loss: 2.0487e+00 token_reg: -4.1067e-01 Norm_mean: 5.8488e-01 
2024-12-09 08:49:32,990 INFO: [flowe..][epoch:  1, iter:     990, lr:(1.100e-05,1.100e-07,1.100e-06,)] [eta: 0:00:11, time (data): 1.241 (0.000)] loss: -8.6616e-02 token_reg: -4.1067e-01 Norm_mean: 5.8487e-01 
2024-12-09 08:49:45,386 INFO: [flowe..][epoch:  1, iter:   1,000, lr:(1.000e-06,1.000e-08,1.000e-07,)] [eta: -1 day, 23:59:59, time (data): 1.241 (0.000)] loss: 1.7112e-01 token_reg: -4.1067e-01 Norm_mean: 5.8487e-01 
2024-12-09 08:49:45,387 INFO: Saving models and training states.
2024-12-09 08:49:45,405 INFO: text_encoder moved: 8.199062115939644e-05
2024-12-09 08:49:45,442 INFO: unet moved: 0.001044996805376286
2024-12-09 08:50:31,792 INFO: End of training. Time consumed: 0:21:49
2024-12-09 08:50:31,792 INFO: Save the latest model.
2024-12-09 08:50:31,808 INFO: text_encoder moved: 8.199062115939644e-05
2024-12-09 08:50:31,849 INFO: unet moved: 0.001044996805376286
